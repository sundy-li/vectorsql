// Code generated by goyacc -o src/parsers/sqlparser/sql.go src/parsers/sqlparser/sql.y. DO NOT EDIT.

//line src/parsers/sqlparser/sql.y:19
package sqlparser

import __yyfmt__ "fmt"

//line src/parsers/sqlparser/sql.y:19

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line src/parsers/sqlparser/sql.y:54
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	tableOption                      *TableOption
	databaseOption                   *DatabaseOption
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	formats                          *Formats
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      *ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const FORMAT = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const VALUES = 57377
const LAST_INSERT_ID = 57378
const NEXT = 57379
const VALUE = 57380
const SHARE = 57381
const MODE = 57382
const SQL_NO_CACHE = 57383
const SQL_CACHE = 57384
const JOIN = 57385
const STRAIGHT_JOIN = 57386
const LEFT = 57387
const RIGHT = 57388
const INNER = 57389
const OUTER = 57390
const CROSS = 57391
const NATURAL = 57392
const USE = 57393
const FORCE = 57394
const ON = 57395
const USING = 57396
const ID = 57397
const HEX = 57398
const STRING = 57399
const INTEGRAL = 57400
const FLOAT = 57401
const HEXNUM = 57402
const VALUE_ARG = 57403
const LIST_ARG = 57404
const COMMENT = 57405
const COMMENT_KEYWORD = 57406
const BIT_LITERAL = 57407
const NULL = 57408
const TRUE = 57409
const FALSE = 57410
const OFF = 57411
const OR = 57412
const AND = 57413
const NOT = 57414
const BETWEEN = 57415
const CASE = 57416
const WHEN = 57417
const THEN = 57418
const ELSE = 57419
const END = 57420
const LE = 57421
const GE = 57422
const NE = 57423
const NULL_SAFE_EQUAL = 57424
const IS = 57425
const LIKE = 57426
const REGEXP = 57427
const IN = 57428
const SHIFT_LEFT = 57429
const SHIFT_RIGHT = 57430
const DIV = 57431
const MOD = 57432
const UNARY = 57433
const COLLATE = 57434
const BINARY = 57435
const UNDERSCORE_BINARY = 57436
const UNDERSCORE_UTF8MB4 = 57437
const INTERVAL = 57438
const JSON_EXTRACT_OP = 57439
const JSON_UNQUOTE_EXTRACT_OP = 57440
const CREATE = 57441
const ALTER = 57442
const DROP = 57443
const RENAME = 57444
const ANALYZE = 57445
const ADD = 57446
const FLUSH = 57447
const SCHEMA = 57448
const TABLE = 57449
const DESCRIPTOR = 57450
const INDEX = 57451
const VIEW = 57452
const TO = 57453
const IGNORE = 57454
const IF = 57455
const UNIQUE = 57456
const PRIMARY = 57457
const COLUMN = 57458
const SPATIAL = 57459
const FULLTEXT = 57460
const KEY_BLOCK_SIZE = 57461
const CHECK = 57462
const ACTION = 57463
const CASCADE = 57464
const CONSTRAINT = 57465
const FOREIGN = 57466
const NO = 57467
const REFERENCES = 57468
const RESTRICT = 57469
const SHOW = 57470
const DESCRIBE = 57471
const EXPLAIN = 57472
const DATE = 57473
const ESCAPE = 57474
const REPAIR = 57475
const OPTIMIZE = 57476
const TRUNCATE = 57477
const MAXVALUE = 57478
const PARTITION = 57479
const REORGANIZE = 57480
const LESS = 57481
const THAN = 57482
const PROCEDURE = 57483
const TRIGGER = 57484
const VINDEX = 57485
const VINDEXES = 57486
const STATUS = 57487
const VARIABLES = 57488
const WARNINGS = 57489
const SEQUENCE = 57490
const BEGIN = 57491
const START = 57492
const TRANSACTION = 57493
const COMMIT = 57494
const ROLLBACK = 57495
const BIT = 57496
const TINYINT = 57497
const SMALLINT = 57498
const MEDIUMINT = 57499
const INT = 57500
const INTEGER = 57501
const BIGINT = 57502
const INTNUM = 57503
const REAL = 57504
const DOUBLE = 57505
const FLOAT_TYPE = 57506
const DECIMAL = 57507
const NUMERIC = 57508
const TIME = 57509
const TIMESTAMP = 57510
const DATETIME = 57511
const YEAR = 57512
const CHAR = 57513
const VARCHAR = 57514
const BOOL = 57515
const CHARACTER = 57516
const VARBINARY = 57517
const NCHAR = 57518
const TEXT = 57519
const TINYTEXT = 57520
const MEDIUMTEXT = 57521
const LONGTEXT = 57522
const BLOB = 57523
const TINYBLOB = 57524
const MEDIUMBLOB = 57525
const LONGBLOB = 57526
const JSON = 57527
const ENUM = 57528
const GEOMETRY = 57529
const POINT = 57530
const LINESTRING = 57531
const POLYGON = 57532
const GEOMETRYCOLLECTION = 57533
const MULTIPOINT = 57534
const MULTILINESTRING = 57535
const MULTIPOLYGON = 57536
const INT8 = 57537
const INT16 = 57538
const INT32 = 57539
const INT64 = 57540
const UINT8 = 57541
const UINT16 = 57542
const UINT32 = 57543
const UINT64 = 57544
const FLOAT32 = 57545
const FLOAT64 = 57546
const ENUM8 = 57547
const ENUM16 = 57548
const NULLABLE = 57549
const UUID = 57550
const NULLX = 57551
const AUTO_INCREMENT = 57552
const APPROXNUM = 57553
const SIGNED = 57554
const UNSIGNED = 57555
const ZEROFILL = 57556
const COLLATION = 57557
const DATABASES = 57558
const TABLES = 57559
const VITESS_METADATA = 57560
const VSCHEMA = 57561
const FULL = 57562
const PROCESSLIST = 57563
const COLUMNS = 57564
const FIELDS = 57565
const ENGINES = 57566
const ENGINE = 57567
const PLUGINS = 57568
const NAMES = 57569
const CHARSET = 57570
const GLOBAL = 57571
const SESSION = 57572
const ISOLATION = 57573
const LEVEL = 57574
const READ = 57575
const WRITE = 57576
const ONLY = 57577
const REPEATABLE = 57578
const COMMITTED = 57579
const UNCOMMITTED = 57580
const SERIALIZABLE = 57581
const CURRENT_TIMESTAMP = 57582
const DATABASE = 57583
const CURRENT_DATE = 57584
const CURRENT_TIME = 57585
const LOCALTIME = 57586
const LOCALTIMESTAMP = 57587
const UTC_DATE = 57588
const UTC_TIME = 57589
const UTC_TIMESTAMP = 57590
const REPLACE = 57591
const CONVERT = 57592
const CAST = 57593
const SUBSTR = 57594
const SUBSTRING = 57595
const GROUP_CONCAT = 57596
const SEPARATOR = 57597
const TIMESTAMPADD = 57598
const TIMESTAMPDIFF = 57599
const MATCH = 57600
const AGAINST = 57601
const BOOLEAN = 57602
const LANGUAGE = 57603
const WITH = 57604
const QUERY = 57605
const EXPANSION = 57606
const UNUSED = 57607
const ARRAY = 57608
const CUME_DIST = 57609
const DESCRIPTION = 57610
const DENSE_RANK = 57611
const EMPTY = 57612
const EXCEPT = 57613
const FIRST_VALUE = 57614
const GROUPING = 57615
const GROUPS = 57616
const JSON_TABLE = 57617
const LAG = 57618
const LAST_VALUE = 57619
const LATERAL = 57620
const LEAD = 57621
const MEMBER = 57622
const NTH_VALUE = 57623
const NTILE = 57624
const OF = 57625
const OVER = 57626
const PERCENT_RANK = 57627
const RANK = 57628
const RECURSIVE = 57629
const ROW_NUMBER = 57630
const SYSTEM = 57631
const WINDOW = 57632
const ACTIVE = 57633
const ADMIN = 57634
const BUCKETS = 57635
const CLONE = 57636
const COMPONENT = 57637
const DEFINITION = 57638
const ENFORCED = 57639
const EXCLUDE = 57640
const FOLLOWING = 57641
const GEOMCOLLECTION = 57642
const GET_MASTER_PUBLIC_KEY = 57643
const HISTOGRAM = 57644
const HISTORY = 57645
const INACTIVE = 57646
const INVISIBLE = 57647
const LOCKED = 57648
const MASTER_COMPRESSION_ALGORITHMS = 57649
const MASTER_PUBLIC_KEY_PATH = 57650
const MASTER_TLS_CIPHERSUITES = 57651
const MASTER_ZSTD_COMPRESSION_LEVEL = 57652
const NESTED = 57653
const NETWORK_NAMESPACE = 57654
const NOWAIT = 57655
const NULLS = 57656
const OJ = 57657
const OLD = 57658
const OPTIONAL = 57659
const ORDINALITY = 57660
const ORGANIZATION = 57661
const OTHERS = 57662
const PATH = 57663
const PERSIST = 57664
const PERSIST_ONLY = 57665
const PRECEDING = 57666
const PRIVILEGE_CHECKS_USER = 57667
const PROCESS = 57668
const RANDOM = 57669
const REFERENCE = 57670
const REQUIRE_ROW_FORMAT = 57671
const RESOURCE = 57672
const RESPECT = 57673
const RESTART = 57674
const RETAIN = 57675
const REUSE = 57676
const ROLE = 57677
const SECONDARY = 57678
const SECONDARY_ENGINE = 57679
const SECONDARY_LOAD = 57680
const SECONDARY_UNLOAD = 57681
const SKIP = 57682
const SRID = 57683
const THREAD_PRIORITY = 57684
const TIES = 57685
const UNBOUNDED = 57686
const VCPU = 57687
const VISIBLE = 57688

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"FORMAT",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT8",
	"INT16",
	"INT32",
	"INT64",
	"UINT8",
	"UINT16",
	"UINT32",
	"UINT64",
	"FLOAT32",
	"FLOAT64",
	"ENUM8",
	"ENUM16",
	"NULLABLE",
	"UUID",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"ENGINE",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line src/parsers/sqlparser/sql.y:4498

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	5, 29,
	-2, 4,
	-1, 37,
	162, 316,
	163, 316,
	-2, 302,
	-1, 320,
	113, 668,
	-2, 664,
	-1, 321,
	113, 669,
	-2, 665,
	-1, 389,
	83, 917,
	-2, 63,
	-1, 390,
	83, 835,
	-2, 64,
	-1, 395,
	83, 804,
	-2, 630,
	-1, 397,
	83, 865,
	-2, 632,
	-1, 690,
	1, 368,
	5, 368,
	12, 368,
	13, 368,
	14, 368,
	15, 368,
	17, 368,
	19, 368,
	20, 368,
	31, 368,
	32, 368,
	43, 368,
	44, 368,
	45, 368,
	46, 368,
	47, 368,
	49, 368,
	50, 368,
	53, 368,
	54, 368,
	56, 368,
	57, 368,
	364, 368,
	-2, 396,
	-1, 694,
	54, 44,
	56, 44,
	-2, 48,
	-1, 859,
	113, 671,
	-2, 667,
	-1, 1094,
	5, 30,
	-2, 463,
	-1, 1124,
	5, 29,
	-2, 604,
	-1, 1391,
	5, 30,
	-2, 605,
	-1, 1451,
	5, 29,
	-2, 607,
	-1, 1536,
	5, 30,
	-2, 608,
}

const yyPrivate = 57344

const yyLast = 17356

var yyAct = [...]int{

	321, 1560, 1351, 1570, 1227, 1524, 325, 1127, 646, 1467,
	1416, 1317, 1152, 1431, 1282, 351, 338, 1322, 946, 299,
	547, 941, 993, 1279, 1283, 1147, 1128, 327, 57, 827,
	645, 3, 81, 686, 1055, 969, 264, 978, 1289, 264,
	1295, 1177, 1254, 891, 1015, 943, 805, 1158, 884, 1086,
	819, 1194, 894, 1206, 861, 394, 707, 912, 948, 982,
	932, 578, 352, 51, 518, 383, 584, 264, 81, 1011,
	706, 388, 264, 925, 264, 590, 598, 323, 308, 380,
	290, 687, 298, 385, 696, 660, 56, 1563, 1547, 1558,
	1037, 61, 661, 1534, 1555, 363, 1352, 369, 370, 367,
	368, 366, 365, 364, 1546, 1036, 1533, 1271, 1382, 523,
	999, 371, 372, 551, 51, 536, 312, 63, 64, 65,
	66, 67, 304, 1315, 1316, 291, 292, 293, 294, 964,
	965, 297, 1314, 1041, 259, 255, 963, 256, 257, 708,
	1024, 709, 1035, 1498, 611, 610, 620, 621, 613, 614,
	615, 616, 617, 618, 619, 612, 1167, 274, 622, 1166,
	567, 972, 1168, 572, 568, 565, 566, 296, 295, 1255,
	1185, 251, 992, 253, 1229, 1419, 1438, 1000, 289, 553,
	1373, 284, 555, 549, 1371, 988, 794, 560, 561, 570,
	793, 989, 1032, 1029, 1030, 1231, 1028, 791, 1557, 1554,
	1525, 1226, 926, 1578, 1517, 983, 1468, 537, 1257, 1476,
	1574, 525, 253, 552, 554, 1232, 798, 893, 784, 1470,
	1153, 1155, 1223, 985, 1309, 1308, 792, 795, 1225, 1039,
	1042, 985, 267, 1307, 521, 528, 571, 266, 533, 270,
	1103, 1230, 1259, 254, 1263, 1100, 1258, 278, 1256, 273,
	1505, 391, 264, 1261, 1049, 264, 1394, 1048, 634, 635,
	1178, 264, 1260, 1241, 1163, 1334, 1034, 264, 1113, 258,
	81, 1080, 81, 833, 81, 81, 702, 81, 602, 81,
	252, 276, 970, 543, 622, 81, 959, 283, 1469, 1262,
	1264, 830, 556, 985, 557, 558, 1237, 559, 1154, 562,
	1062, 530, 1033, 531, 820, 573, 532, 597, 825, 1000,
	70, 1477, 1475, 550, 268, 81, 1335, 1273, 1572, 1515,
	984, 1573, 519, 1571, 824, 1224, 1487, 1222, 984, 1499,
	519, 586, 548, 1532, 548, 587, 548, 548, 868, 548,
	990, 548, 1038, 634, 635, 595, 71, 548, 634, 635,
	632, 917, 866, 867, 865, 280, 271, 1040, 281, 282,
	287, 597, 612, 517, 272, 622, 275, 51, 269, 286,
	285, 1214, 1293, 539, 540, 541, 574, 575, 264, 264,
	264, 1204, 631, 1171, 710, 633, 821, 81, 913, 786,
	984, 596, 595, 81, 1183, 981, 979, 588, 980, 1520,
	1212, 1058, 592, 1579, 977, 983, 690, 913, 597, 1110,
	1077, 1078, 1079, 644, 1538, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 685, 659, 662, 662, 662, 668,
	662, 662, 668, 662, 676, 677, 678, 679, 680, 681,
	1427, 691, 1580, 1426, 524, 885, 1200, 886, 577, 1199,
	663, 665, 667, 669, 671, 673, 674, 664, 666, 695,
	670, 672, 577, 675, 1057, 1186, 700, 1169, 1213, 1170,
	704, 836, 837, 1218, 1215, 1208, 1216, 1211, 1540, 1207,
	1056, 318, 1209, 1210, 611, 610, 620, 621, 613, 614,
	615, 616, 617, 618, 619, 612, 1217, 1516, 622, 611,
	610, 620, 621, 613, 614, 615, 616, 617, 618, 619,
	612, 1445, 1098, 622, 1097, 54, 1422, 1360, 264, 596,
	595, 526, 527, 81, 1239, 864, 1236, 1195, 264, 264,
	81, 596, 595, 1061, 264, 22, 597, 264, 1099, 1087,
	264, 1473, 1556, 783, 264, 250, 81, 81, 597, 1513,
	790, 81, 81, 81, 264, 81, 81, 851, 853, 854,
	1354, 81, 81, 852, 832, 1178, 808, 809, 1542, 577,
	391, 810, 811, 812, 1173, 814, 815, 1473, 1528, 596,
	595, 816, 817, 1064, 887, 548, 1275, 804, 596, 595,
	81, 803, 548, 787, 264, 303, 597, 1473, 577, 807,
	81, 785, 831, 1473, 1506, 597, 838, 782, 548, 548,
	377, 378, 545, 548, 548, 548, 799, 548, 548, 596,
	595, 862, 538, 548, 548, 613, 614, 615, 616, 617,
	618, 619, 612, 863, 1511, 622, 597, 1484, 350, 1473,
	1472, 1414, 1413, 1483, 81, 1396, 577, 1393, 577, 857,
	576, 615, 616, 617, 618, 619, 612, 1331, 859, 622,
	903, 906, 1343, 1342, 1337, 1340, 914, 840, 1337, 1339,
	79, 1337, 1338, 1337, 1336, 986, 855, 81, 81, 898,
	1092, 577, 929, 577, 264, 896, 577, 717, 716, 1159,
	1280, 24, 264, 1292, 264, 1292, 51, 264, 264, 896,
	1244, 264, 264, 264, 81, 928, 393, 58, 953, 1159,
	697, 648, 888, 889, 1389, 1486, 1122, 698, 929, 690,
	1123, 698, 1341, 922, 690, 24, 1304, 962, 690, 1116,
	929, 305, 910, 929, 341, 340, 343, 344, 345, 346,
	54, 54, 954, 342, 347, 1092, 956, 1115, 1092, 995,
	996, 997, 998, 1292, 944, 945, 1092, 697, 807, 691,
	699, 703, 701, 691, 699, 834, 697, 957, 952, 1008,
	1009, 1010, 797, 1548, 54, 960, 961, 1379, 1433, 994,
	54, 1412, 973, 1401, 1016, 264, 858, 1327, 81, 1296,
	1297, 24, 264, 264, 264, 264, 264, 1172, 264, 264,
	1012, 1007, 264, 81, 1006, 1005, 1004, 1228, 1026, 1434,
	636, 637, 638, 639, 640, 641, 642, 643, 1021, 264,
	1450, 264, 264, 1053, 1017, 1018, 1019, 264, 610, 620,
	621, 613, 614, 615, 616, 617, 618, 619, 612, 1565,
	54, 622, 1001, 1002, 1003, 1561, 1013, 1014, 1329, 1299,
	548, 1280, 611, 610, 620, 621, 613, 614, 615, 616,
	617, 618, 619, 612, 1201, 548, 622, 899, 900, 826,
	801, 905, 908, 909, 1139, 1065, 846, 1137, 1302, 1140,
	1068, 862, 1138, 1141, 1301, 938, 939, 391, 1136, 859,
	1135, 309, 310, 863, 1552, 1545, 921, 1240, 923, 924,
	1070, 1069, 1550, 591, 1075, 1074, 579, 1190, 393, 715,
	393, 546, 393, 393, 1182, 393, 1387, 393, 589, 580,
	1082, 1081, 1522, 393, 1521, 1448, 1180, 1174, 1429, 1025,
	264, 264, 264, 264, 264, 1129, 800, 942, 591, 839,
	306, 307, 264, 828, 300, 264, 1492, 1073, 301, 58,
	264, 1491, 1436, 600, 264, 1072, 1124, 690, 690, 690,
	690, 690, 1159, 1130, 569, 1104, 1133, 1567, 1566, 1109,
	1101, 818, 690, 593, 1567, 898, 934, 937, 938, 939,
	935, 690, 936, 940, 1502, 1420, 829, 60, 1125, 1126,
	577, 62, 691, 691, 691, 691, 691, 895, 897, 1160,
	55, 1142, 1161, 1, 1162, 1559, 1353, 944, 1157, 1430,
	1156, 1031, 1131, 1132, 1523, 1134, 691, 858, 1466, 1164,
	1321, 976, 81, 81, 1179, 393, 934, 937, 938, 939,
	935, 712, 936, 940, 69, 1189, 516, 1191, 1192, 1193,
	1175, 1176, 68, 1203, 934, 937, 938, 939, 935, 1514,
	936, 940, 975, 81, 1296, 1297, 974, 1196, 1197, 1198,
	1474, 1418, 987, 1076, 1184, 991, 1328, 1181, 1519, 723,
	721, 722, 264, 1233, 720, 1235, 725, 724, 719, 277,
	386, 81, 711, 1219, 1020, 548, 860, 594, 72, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 1221, 1234, 1187, 1188, 1205, 1220,
	1091, 1027, 823, 563, 564, 548, 279, 630, 1071, 1165,
	392, 1287, 835, 583, 1490, 1247, 81, 81, 1107, 1129,
	1281, 1435, 1108, 1248, 657, 911, 1272, 326, 850, 1284,
	339, 336, 1266, 337, 918, 1253, 841, 1265, 1121, 604,
	324, 316, 689, 682, 933, 931, 1286, 81, 930, 381,
	1068, 393, 1148, 1145, 1146, 1298, 1294, 1023, 393, 859,
	971, 688, 81, 81, 1300, 1291, 1243, 1381, 1497, 845,
	26, 59, 311, 19, 393, 393, 1285, 1311, 51, 393,
	393, 393, 18, 393, 393, 1310, 17, 20, 16, 393,
	393, 15, 264, 14, 534, 81, 30, 21, 1313, 13,
	12, 1324, 11, 1305, 1306, 10, 1345, 1325, 1326, 9,
	8, 264, 7, 1332, 1333, 6, 5, 81, 842, 4,
	81, 81, 81, 264, 302, 23, 2, 0, 600, 1089,
	0, 393, 81, 1090, 0, 264, 0, 0, 0, 0,
	1094, 1095, 1096, 0, 0, 0, 0, 1102, 0, 0,
	1105, 1106, 0, 0, 1246, 0, 1112, 0, 0, 1359,
	1114, 0, 690, 1117, 1118, 1119, 1120, 0, 1366, 1367,
	0, 1368, 890, 0, 1370, 0, 1372, 1346, 0, 0,
	1362, 1361, 0, 0, 0, 1144, 0, 1276, 915, 1129,
	1347, 0, 1349, 0, 1369, 1388, 264, 691, 0, 1386,
	0, 0, 0, 1406, 0, 919, 920, 0, 0, 1398,
	1397, 0, 0, 0, 0, 1403, 314, 0, 81, 0,
	1404, 1411, 0, 690, 1380, 1385, 0, 0, 0, 1405,
	0, 0, 393, 0, 0, 81, 1415, 0, 1083, 1084,
	1085, 0, 0, 81, 0, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1428, 0, 0, 691, 0,
	1407, 1408, 1409, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 0, 0, 622, 1318, 0,
	0, 0, 0, 0, 81, 81, 0, 81, 0, 0,
	0, 0, 81, 0, 264, 1284, 0, 548, 81, 81,
	81, 264, 1457, 81, 1449, 81, 0, 1456, 1461, 1462,
	1463, 0, 693, 1451, 1465, 1246, 393, 0, 0, 1464,
	0, 0, 1471, 0, 81, 264, 0, 1478, 0, 0,
	0, 393, 0, 1252, 1488, 0, 0, 1421, 0, 1423,
	1424, 1425, 1285, 0, 0, 1452, 0, 1479, 261, 1480,
	1481, 1482, 0, 0, 0, 1503, 1284, 0, 582, 0,
	0, 0, 393, 0, 81, 0, 1512, 1510, 1437, 0,
	0, 0, 0, 1504, 0, 0, 0, 81, 81, 382,
	0, 0, 1485, 0, 520, 0, 522, 1303, 0, 1527,
	1526, 1530, 0, 0, 262, 0, 81, 288, 0, 1129,
	1535, 0, 0, 1285, 0, 51, 0, 0, 264, 0,
	0, 0, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 0, 315, 1544, 0, 384, 1432, 0, 0, 0,
	262, 0, 262, 0, 0, 0, 0, 1551, 1549, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1553,
	0, 1564, 0, 0, 0, 0, 0, 915, 0, 1250,
	1251, 1575, 620, 621, 613, 614, 615, 616, 617, 618,
	619, 612, 1267, 1268, 622, 1269, 1270, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 1277, 1278, 1363,
	0, 0, 0, 0, 0, 0, 1365, 1384, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1374, 1375, 0,
	1562, 0, 0, 0, 0, 0, 0, 581, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 1390, 1391, 1392,
	0, 1395, 0, 0, 603, 611, 610, 620, 621, 613,
	614, 615, 616, 617, 618, 619, 612, 0, 0, 622,
	1202, 393, 1410, 0, 1330, 1378, 0, 0, 0, 0,
	1432, 1318, 0, 0, 529, 0, 0, 535, 0, 647,
	0, 0, 0, 542, 606, 0, 609, 0, 658, 544,
	0, 393, 623, 624, 625, 626, 627, 628, 629, 1377,
	607, 608, 605, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 0, 0, 622, 0, 393,
	262, 0, 0, 262, 0, 0, 0, 0, 0, 262,
	0, 1364, 0, 1444, 0, 262, 0, 0, 0, 0,
	611, 610, 620, 621, 613, 614, 615, 616, 617, 618,
	619, 612, 393, 1376, 622, 0, 0, 1459, 1460, 0,
	0, 915, 0, 0, 1288, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 611, 610, 620, 621, 613, 614,
	615, 616, 617, 618, 619, 612, 0, 0, 622, 0,
	0, 1493, 1494, 1495, 1496, 1290, 0, 0, 1500, 1501,
	684, 0, 694, 0, 0, 0, 0, 0, 0, 0,
	393, 1323, 0, 1507, 1508, 1509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 611, 610,
	620, 621, 613, 614, 615, 616, 617, 618, 619, 612,
	0, 0, 622, 393, 0, 0, 262, 262, 262, 1531,
	0, 0, 0, 0, 0, 0, 1536, 0, 1439, 1440,
	1441, 1442, 1443, 1249, 0, 1350, 1446, 1447, 1355, 1356,
	1357, 0, 0, 0, 0, 1541, 0, 0, 1088, 0,
	393, 0, 0, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 0, 822, 622, 611, 610,
	620, 621, 613, 614, 615, 616, 617, 618, 619, 612,
	0, 0, 622, 0, 0, 0, 0, 0, 0, 0,
	1576, 1577, 848, 849, 0, 0, 0, 0, 0, 0,
	0, 915, 0, 0, 0, 0, 0, 0, 0, 0,
	718, 0, 0, 0, 0, 915, 0, 0, 0, 0,
	788, 789, 0, 0, 0, 0, 796, 0, 0, 382,
	0, 0, 802, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 0, 0, 647, 813, 0, 901, 902,
	0, 0, 0, 393, 0, 0, 262, 0, 0, 0,
	0, 393, 0, 0, 0, 0, 262, 262, 0, 0,
	0, 0, 262, 0, 0, 262, 0, 0, 262, 0,
	0, 0, 806, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 262, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1453, 1454, 0, 1455, 0, 968, 0, 0,
	1417, 0, 0, 0, 1568, 0, 1417, 1417, 1417, 0,
	0, 393, 0, 1323, 0, 0, 0, 0, 0, 0,
	0, 0, 262, 0, 0, 24, 25, 52, 27, 28,
	0, 806, 1417, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 43, 0, 622, 0, 0,
	29, 48, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 927, 0, 0, 0,
	38, 0, 1518, 315, 54, 0, 0, 0, 315, 315,
	955, 0, 315, 315, 315, 393, 393, 0, 916, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 915, 0, 0, 1537, 0, 0, 315, 315, 315,
	315, 0, 262, 0, 0, 0, 0, 0, 1066, 1067,
	262, 585, 950, 0, 1543, 262, 262, 0, 0, 262,
	958, 806, 0, 0, 0, 31, 32, 34, 33, 36,
	0, 50, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 37, 44, 45, 1022, 0, 46,
	47, 35, 0, 0, 1043, 1044, 1045, 1046, 1047, 0,
	1050, 1051, 0, 1093, 1052, 39, 40, 0, 41, 42,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1111, 1054, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	262, 262, 262, 262, 262, 0, 262, 262, 0, 0,
	262, 0, 1149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 262, 0, 1059,
	1060, 0, 0, 0, 0, 262, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 315,
	0, 0, 0, 0, 0, 1238, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 916, 262, 262,
	262, 262, 262, 0, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 262, 0, 0, 0, 0, 950, 0,
	0, 0, 262, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1274, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1312, 758, 761, 762,
	763, 764, 765, 766, 1242, 775, 776, 777, 778, 779,
	746, 747, 748, 749, 726, 727, 759, 0, 729, 0,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	750, 751, 752, 753, 754, 755, 756, 757, 767, 768,
	769, 770, 771, 772, 773, 774, 780, 781, 740, 741,
	262, 743, 0, 0, 0, 0, 0, 0, 0, 0,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 1383, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 647, 0, 0, 0, 0, 0, 0, 0,
	1399, 0, 0, 1400, 1344, 0, 1402, 0, 0, 0,
	0, 1149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1348, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1358, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	262, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 262, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 262, 916, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1529, 647,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1458, 0, 0, 0, 0, 0, 0, 950,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 262, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1539, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 502, 490, 262, 447, 505, 421,
	437, 513, 438, 441, 478, 406, 460, 165, 435, 515,
	0, 425, 401, 431, 402, 423, 449, 111, 453, 420,
	492, 463, 504, 137, 511, 139, 469, 0, 211, 153,
	0, 0, 451, 494, 458, 487, 446, 479, 411, 468,
	506, 436, 476, 507, 0, 0, 0, 80, 0, 1319,
	1320, 0, 0, 0, 0, 0, 101, 0, 473, 501,
	433, 475, 477, 400, 470, 0, 404, 407, 512, 497,
	428, 429, 0, 0, 0, 0, 0, 0, 0, 450,
	459, 484, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 467, 0, 0, 0, 408, 405, 0,
	0, 448, 0, 0, 0, 410, 0, 427, 485, 0,
	398, 119, 489, 496, 0, 445, 265, 500, 443, 442,
	503, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 493, 424, 432, 105, 430, 193,
	172, 231, 466, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 0, 212, 234,
	249, 99, 419, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 415, 418, 413, 414,
	461, 462, 508, 509, 510, 486, 409, 0, 416, 417,
	0, 491, 498, 499, 465, 82, 91, 138, 246, 186,
	116, 235, 399, 412, 109, 422, 0, 0, 434, 439,
	440, 452, 454, 455, 456, 457, 464, 471, 472, 474,
	480, 481, 482, 483, 488, 495, 514, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 502, 490, 0, 447, 505, 421, 437,
	513, 438, 441, 478, 406, 460, 165, 435, 515, 0,
	425, 401, 431, 402, 423, 449, 111, 453, 420, 492,
	463, 504, 137, 511, 139, 469, 0, 211, 153, 0,
	0, 451, 494, 458, 487, 446, 479, 411, 468, 506,
	436, 476, 507, 54, 0, 0, 80, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 473, 501, 433,
	475, 477, 400, 470, 0, 404, 407, 512, 497, 428,
	429, 0, 0, 0, 0, 0, 0, 0, 450, 459,
	484, 444, 0, 0, 0, 0, 0, 0, 0, 0,
	426, 0, 467, 0, 0, 0, 408, 405, 0, 0,
	448, 0, 0, 0, 410, 0, 427, 485, 0, 398,
	119, 489, 496, 0, 445, 265, 500, 443, 442, 503,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 493, 424, 432, 105, 430, 193, 172,
	231, 466, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 403, 0, 212, 234, 249,
	99, 419, 219, 243, 244, 0, 0, 100, 118, 113,
	0, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 415, 418, 413, 414, 461,
	462, 508, 509, 510, 486, 409, 0, 416, 417, 0,
	491, 498, 499, 465, 82, 91, 138, 246, 186, 116,
	235, 399, 412, 109, 422, 0, 0, 434, 439, 440,
	452, 454, 455, 456, 457, 464, 471, 472, 474, 480,
	481, 482, 483, 488, 495, 514, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 502, 490, 0, 447, 505, 421, 437, 513,
	438, 441, 478, 406, 460, 165, 435, 515, 0, 425,
	401, 431, 402, 423, 449, 111, 453, 420, 492, 463,
	504, 137, 511, 139, 469, 0, 211, 153, 0, 0,
	451, 494, 458, 487, 446, 479, 411, 468, 506, 436,
	476, 507, 0, 0, 0, 80, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 473, 501, 433, 475,
	477, 400, 470, 0, 404, 407, 512, 497, 428, 429,
	0, 0, 0, 0, 0, 0, 0, 450, 459, 484,
	444, 0, 0, 0, 0, 0, 0, 1245, 0, 426,
	0, 467, 0, 0, 0, 408, 405, 0, 0, 448,
	0, 0, 0, 410, 0, 427, 485, 0, 398, 119,
	489, 496, 0, 445, 265, 500, 443, 442, 503, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 493, 424, 432, 105, 430, 193, 172, 231,
	466, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 403, 0, 212, 234, 249, 99,
	419, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 415, 418, 413, 414, 461, 462,
	508, 509, 510, 486, 409, 0, 416, 417, 0, 491,
	498, 499, 465, 82, 91, 138, 246, 186, 116, 235,
	399, 412, 109, 422, 0, 0, 434, 439, 440, 452,
	454, 455, 456, 457, 464, 471, 472, 474, 480, 481,
	482, 483, 488, 495, 514, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 502, 490, 0, 447, 505, 421, 437, 513, 438,
	441, 478, 406, 460, 165, 435, 515, 0, 425, 401,
	431, 402, 423, 449, 111, 453, 420, 492, 463, 504,
	137, 511, 139, 469, 0, 211, 153, 0, 0, 451,
	494, 458, 487, 446, 479, 411, 468, 506, 436, 476,
	507, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 473, 501, 433, 475, 477,
	400, 470, 0, 404, 407, 512, 497, 428, 429, 0,
	0, 0, 0, 0, 0, 0, 450, 459, 484, 444,
	0, 0, 0, 0, 0, 0, 959, 0, 426, 0,
	467, 0, 0, 0, 408, 405, 0, 0, 448, 0,
	0, 0, 410, 0, 427, 485, 0, 398, 119, 489,
	496, 0, 445, 265, 500, 443, 442, 503, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 493, 424, 432, 105, 430, 193, 172, 231, 466,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 403, 0, 212, 234, 249, 99, 419,
	219, 243, 244, 0, 0, 100, 118, 113, 0, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 415, 418, 413, 414, 461, 462, 508,
	509, 510, 486, 409, 0, 416, 417, 0, 491, 498,
	499, 465, 82, 91, 138, 246, 186, 116, 235, 399,
	412, 109, 422, 0, 0, 434, 439, 440, 452, 454,
	455, 456, 457, 464, 471, 472, 474, 480, 481, 482,
	483, 488, 495, 514, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	502, 490, 0, 447, 505, 421, 437, 513, 438, 441,
	478, 406, 460, 165, 435, 515, 0, 425, 401, 431,
	402, 423, 449, 111, 453, 420, 492, 463, 504, 137,
	511, 139, 469, 0, 211, 153, 0, 0, 451, 494,
	458, 487, 446, 479, 411, 468, 506, 436, 476, 507,
	0, 0, 0, 320, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 473, 501, 433, 475, 477, 400,
	470, 0, 404, 407, 512, 497, 428, 429, 0, 0,
	0, 0, 0, 0, 0, 450, 459, 484, 444, 0,
	0, 0, 0, 0, 0, 856, 0, 426, 0, 467,
	0, 0, 0, 408, 405, 0, 0, 448, 0, 0,
	0, 410, 0, 427, 485, 0, 398, 119, 489, 496,
	0, 445, 265, 500, 443, 442, 503, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	493, 424, 432, 105, 430, 193, 172, 231, 466, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 403, 0, 212, 234, 249, 99, 419, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 415, 418, 413, 414, 461, 462, 508, 509,
	510, 486, 409, 0, 416, 417, 0, 491, 498, 499,
	465, 82, 91, 138, 246, 186, 116, 235, 399, 412,
	109, 422, 0, 0, 434, 439, 440, 452, 454, 455,
	456, 457, 464, 471, 472, 474, 480, 481, 482, 483,
	488, 495, 514, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 502,
	490, 0, 447, 505, 421, 437, 513, 438, 441, 478,
	406, 460, 165, 435, 515, 0, 425, 401, 431, 402,
	423, 449, 111, 453, 420, 492, 463, 504, 137, 511,
	139, 469, 0, 211, 153, 0, 0, 451, 494, 458,
	487, 446, 479, 411, 468, 506, 436, 476, 507, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 473, 501, 433, 475, 477, 400, 470,
	0, 404, 407, 512, 497, 428, 429, 0, 0, 0,
	0, 0, 0, 0, 450, 459, 484, 444, 0, 0,
	0, 0, 0, 0, 0, 0, 426, 0, 467, 0,
	0, 0, 408, 405, 0, 0, 448, 0, 0, 0,
	410, 0, 427, 485, 0, 398, 119, 489, 496, 0,
	445, 265, 500, 443, 442, 503, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 493,
	424, 432, 105, 430, 193, 172, 231, 466, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 403, 0, 212, 234, 249, 99, 419, 219, 243,
	244, 0, 0, 100, 118, 113, 0, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 415, 418, 413, 414, 461, 462, 508, 509, 510,
	486, 409, 0, 416, 417, 0, 491, 498, 499, 465,
	82, 91, 138, 246, 186, 116, 235, 399, 412, 109,
	422, 0, 0, 434, 439, 440, 452, 454, 455, 456,
	457, 464, 471, 472, 474, 480, 481, 482, 483, 488,
	495, 514, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 502, 490,
	0, 447, 505, 421, 437, 513, 438, 441, 478, 406,
	460, 165, 435, 515, 0, 425, 401, 431, 402, 423,
	449, 111, 453, 420, 492, 463, 504, 137, 511, 139,
	469, 0, 211, 153, 0, 0, 451, 494, 458, 487,
	446, 479, 411, 468, 506, 436, 476, 507, 0, 0,
	0, 320, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 473, 501, 433, 475, 477, 400, 470, 0,
	404, 407, 512, 497, 428, 429, 0, 0, 0, 0,
	0, 0, 0, 450, 459, 484, 444, 0, 0, 0,
	0, 0, 0, 0, 0, 426, 0, 467, 0, 0,
	0, 408, 405, 0, 0, 448, 0, 0, 0, 410,
	0, 427, 485, 0, 398, 119, 489, 496, 0, 445,
	265, 500, 443, 442, 503, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 493, 424,
	432, 105, 430, 193, 172, 231, 466, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 0, 212, 234, 249, 99, 419, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	415, 418, 413, 414, 461, 462, 508, 509, 510, 486,
	409, 0, 416, 417, 0, 491, 498, 499, 465, 82,
	91, 138, 246, 186, 116, 235, 399, 412, 109, 422,
	0, 0, 434, 439, 440, 452, 454, 455, 456, 457,
	464, 471, 472, 474, 480, 481, 482, 483, 488, 495,
	514, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 502, 490, 0,
	447, 505, 421, 437, 513, 438, 441, 478, 406, 460,
	165, 435, 515, 0, 425, 401, 431, 402, 423, 449,
	111, 453, 420, 492, 463, 504, 137, 511, 139, 469,
	0, 211, 153, 0, 0, 451, 494, 458, 487, 446,
	479, 411, 468, 506, 436, 476, 507, 0, 0, 0,
	80, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 473, 501, 433, 475, 477, 400, 470, 0, 404,
	407, 512, 497, 428, 429, 0, 0, 0, 0, 0,
	0, 0, 450, 459, 484, 444, 0, 0, 0, 0,
	0, 0, 0, 0, 426, 0, 467, 0, 0, 0,
	408, 405, 0, 0, 448, 0, 0, 0, 410, 0,
	427, 485, 0, 398, 119, 489, 496, 0, 445, 265,
	500, 443, 442, 503, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 493, 424, 432,
	105, 430, 193, 172, 231, 466, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 396, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	0, 212, 234, 249, 99, 419, 219, 243, 244, 0,
	0, 100, 118, 113, 0, 181, 397, 395, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 415,
	418, 413, 414, 461, 462, 508, 509, 510, 486, 409,
	0, 416, 417, 0, 491, 498, 499, 465, 82, 91,
	138, 246, 186, 116, 235, 399, 412, 109, 422, 0,
	0, 434, 439, 440, 452, 454, 455, 456, 457, 464,
	471, 472, 474, 480, 481, 482, 483, 488, 495, 514,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242, 502, 490, 0, 447,
	505, 421, 437, 513, 438, 441, 478, 406, 460, 165,
	435, 515, 0, 425, 401, 431, 402, 423, 449, 111,
	453, 420, 492, 463, 504, 137, 511, 139, 469, 0,
	211, 153, 0, 0, 451, 494, 458, 487, 446, 479,
	411, 468, 506, 436, 476, 507, 0, 0, 0, 263,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	473, 501, 433, 475, 477, 400, 470, 0, 404, 407,
	512, 497, 428, 429, 0, 0, 0, 0, 0, 0,
	0, 450, 459, 484, 444, 0, 0, 0, 0, 0,
	0, 0, 0, 426, 0, 467, 0, 0, 0, 408,
	405, 0, 0, 448, 0, 0, 0, 410, 0, 427,
	485, 0, 398, 119, 489, 496, 0, 445, 265, 500,
	443, 442, 503, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 493, 424, 432, 105,
	430, 193, 172, 231, 466, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 403, 0,
	212, 234, 249, 99, 419, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 415, 418,
	413, 414, 461, 462, 508, 509, 510, 486, 409, 0,
	416, 417, 0, 491, 498, 499, 465, 82, 91, 138,
	246, 186, 116, 235, 399, 412, 109, 422, 0, 0,
	434, 439, 440, 452, 454, 455, 456, 457, 464, 471,
	472, 474, 480, 481, 482, 483, 488, 495, 514, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 502, 490, 0, 447, 505,
	421, 437, 513, 438, 441, 478, 406, 460, 165, 435,
	515, 0, 425, 401, 431, 402, 423, 449, 111, 453,
	420, 492, 463, 504, 137, 511, 139, 469, 0, 211,
	153, 0, 0, 451, 494, 458, 487, 446, 479, 411,
	468, 506, 436, 476, 507, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 473,
	501, 433, 475, 477, 400, 470, 0, 404, 407, 512,
	497, 428, 429, 0, 0, 0, 0, 0, 0, 0,
	450, 459, 484, 444, 0, 0, 0, 0, 0, 0,
	0, 0, 426, 0, 467, 0, 0, 0, 408, 405,
	0, 0, 448, 0, 0, 0, 410, 0, 427, 485,
	0, 398, 119, 489, 496, 0, 445, 265, 500, 443,
	442, 503, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 493, 424, 432, 105, 430,
	193, 172, 231, 466, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 705, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 396, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 403, 0, 212,
	234, 249, 99, 419, 219, 243, 244, 0, 0, 100,
	118, 113, 0, 181, 397, 395, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 415, 418, 413,
	414, 461, 462, 508, 509, 510, 486, 409, 0, 416,
	417, 0, 491, 498, 499, 465, 82, 91, 138, 246,
	186, 116, 235, 399, 412, 109, 422, 0, 0, 434,
	439, 440, 452, 454, 455, 456, 457, 464, 471, 472,
	474, 480, 481, 482, 483, 488, 495, 514, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 502, 490, 0, 447, 505, 421,
	437, 513, 438, 441, 478, 406, 460, 165, 435, 515,
	0, 425, 401, 431, 402, 423, 449, 111, 453, 420,
	492, 463, 504, 137, 511, 139, 469, 0, 211, 153,
	0, 0, 451, 494, 458, 487, 446, 479, 411, 468,
	506, 436, 476, 507, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 473, 501,
	433, 475, 477, 400, 470, 0, 404, 407, 512, 497,
	428, 429, 0, 0, 0, 0, 0, 0, 0, 450,
	459, 484, 444, 0, 0, 0, 0, 0, 0, 0,
	0, 426, 0, 467, 0, 0, 0, 408, 405, 0,
	0, 448, 0, 0, 0, 410, 0, 427, 485, 0,
	398, 119, 489, 496, 0, 445, 265, 500, 443, 442,
	503, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 493, 424, 432, 105, 430, 193,
	172, 231, 466, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 387, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	396, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 403, 0, 212, 234,
	249, 99, 419, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 397, 395, 390, 389, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 415, 418, 413, 414,
	461, 462, 508, 509, 510, 486, 409, 0, 416, 417,
	0, 491, 498, 499, 465, 82, 91, 138, 246, 186,
	116, 235, 399, 412, 109, 422, 0, 0, 434, 439,
	440, 452, 454, 455, 456, 457, 464, 471, 472, 474,
	480, 481, 482, 483, 488, 495, 514, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 322,
	0, 0, 0, 111, 0, 319, 0, 0, 0, 137,
	362, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 320, 341, 340, 343, 344, 345, 346,
	0, 0, 101, 342, 347, 348, 349, 0, 0, 0,
	317, 334, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 332, 0, 0, 0, 0, 375,
	0, 333, 0, 0, 328, 329, 330, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 1150,
	1151, 0, 265, 0, 0, 373, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 363, 374, 369, 370, 367, 368, 366, 365,
	364, 376, 355, 356, 357, 358, 360, 0, 371, 372,
	359, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 165,
	0, 0, 0, 0, 0, 322, 0, 0, 0, 111,
	0, 319, 0, 0, 0, 137, 362, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 966, 0, 54, 0, 0, 320,
	341, 340, 343, 344, 345, 346, 0, 0, 101, 342,
	347, 348, 349, 967, 0, 0, 317, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 0, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 265, 0,
	0, 373, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 892,
	0, 322, 0, 0, 0, 111, 0, 319, 0, 0,
	0, 137, 362, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 320, 341, 340, 343, 344,
	345, 346, 0, 0, 101, 342, 347, 348, 349, 0,
	0, 0, 317, 334, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 332, 313, 0, 0,
	0, 375, 0, 333, 0, 0, 328, 329, 330, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 265, 0, 0, 373, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 363, 374, 369, 370, 367, 368,
	366, 365, 364, 376, 355, 356, 357, 358, 360, 0,
	371, 372, 359, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 322, 0, 0,
	0, 111, 0, 319, 0, 0, 0, 137, 362, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	577, 320, 341, 340, 343, 344, 345, 346, 0, 0,
	101, 342, 347, 348, 349, 0, 0, 0, 317, 334,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 332, 0, 0, 0, 0, 375, 0, 333,
	0, 0, 328, 329, 330, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 373, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	363, 374, 369, 370, 367, 368, 366, 365, 364, 376,
	355, 356, 357, 358, 360, 0, 371, 372, 359, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 0, 322, 0, 0, 0, 111, 0, 319,
	0, 0, 0, 137, 362, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 353, 354, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 320, 341, 340,
	343, 344, 345, 346, 0, 0, 101, 342, 347, 348,
	349, 0, 0, 0, 317, 334, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 331, 332, 313,
	0, 0, 0, 375, 0, 333, 0, 0, 328, 329,
	330, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 265, 0, 0, 373,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 363, 374, 369, 370,
	367, 368, 366, 365, 364, 376, 355, 356, 357, 358,
	360, 0, 371, 372, 359, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 322,
	0, 0, 0, 111, 0, 319, 0, 0, 0, 137,
	362, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 320, 341, 907, 343, 344, 345, 346,
	0, 0, 101, 342, 347, 348, 349, 0, 0, 0,
	317, 334, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 332, 313, 0, 0, 0, 375,
	0, 333, 0, 0, 328, 329, 330, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 265, 0, 0, 373, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 363, 374, 369, 370, 367, 368, 366, 365,
	364, 376, 355, 356, 357, 358, 360, 0, 371, 372,
	359, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 165,
	0, 0, 0, 0, 0, 322, 0, 0, 0, 111,
	0, 319, 0, 0, 0, 137, 362, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 320,
	341, 904, 343, 344, 345, 346, 0, 0, 101, 342,
	347, 348, 349, 0, 0, 0, 317, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 313, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 265, 0,
	0, 373, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 24, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 0, 322, 0, 0, 0, 111, 0, 319,
	0, 0, 0, 137, 362, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 353, 354, 0, 0, 0, 0,
	0, 0, 0, 0, 54, 0, 0, 320, 341, 340,
	343, 344, 345, 346, 0, 0, 101, 342, 347, 348,
	349, 0, 0, 0, 317, 334, 0, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 331, 332, 0,
	0, 0, 0, 375, 0, 333, 0, 0, 328, 329,
	330, 335, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 265, 0, 0, 373,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 363, 374, 369, 370,
	367, 368, 366, 365, 364, 376, 355, 356, 357, 358,
	360, 0, 371, 372, 359, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 322,
	0, 0, 0, 111, 0, 319, 0, 0, 0, 137,
	362, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	353, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 320, 341, 340, 343, 344, 345, 346,
	0, 0, 101, 342, 347, 348, 349, 0, 0, 0,
	317, 334, 0, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 332, 0, 0, 0, 0, 375,
	0, 333, 0, 0, 328, 329, 330, 335, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 265, 0, 0, 373, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 363, 374, 369, 370, 367, 368, 366, 365,
	364, 376, 355, 356, 357, 358, 360, 0, 371, 372,
	359, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 137, 362, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 353, 354, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 0, 0, 320,
	341, 340, 343, 344, 345, 346, 0, 0, 101, 342,
	347, 348, 349, 0, 0, 0, 0, 334, 0, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 331,
	332, 0, 0, 0, 0, 375, 0, 333, 0, 0,
	328, 329, 330, 335, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 265, 0,
	0, 373, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 1569, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 363, 374,
	369, 370, 367, 368, 366, 365, 364, 376, 355, 356,
	357, 358, 360, 0, 371, 372, 359, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 362, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 577, 320, 341, 340, 343, 344,
	345, 346, 0, 0, 101, 342, 347, 348, 349, 0,
	0, 0, 0, 334, 0, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 331, 332, 0, 0, 0,
	0, 375, 0, 333, 0, 0, 328, 329, 330, 335,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 265, 0, 0, 373, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 363, 374, 369, 370, 367, 368,
	366, 365, 364, 376, 355, 356, 357, 358, 360, 0,
	371, 372, 359, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 362, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 353, 354,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 320, 341, 340, 343, 344, 345, 346, 0, 0,
	101, 342, 347, 348, 349, 0, 0, 0, 0, 334,
	0, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 331, 332, 0, 0, 0, 0, 375, 0, 333,
	0, 0, 328, 329, 330, 335, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 373, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	363, 374, 369, 370, 367, 368, 366, 365, 364, 376,
	355, 356, 357, 358, 360, 0, 371, 372, 359, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 611, 610, 620, 621, 613, 614, 615,
	616, 617, 618, 619, 612, 0, 0, 622, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 599, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 137,
	0, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 601, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 596, 595,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 0, 0, 137, 0, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 76, 77, 0, 0, 73, 0,
	0, 0, 78, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 0, 75,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	949, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 0, 951, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 137,
	0, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	54, 0, 0, 80, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 24,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 692, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 949, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 263, 0, 951,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 947, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 111, 0, 0, 0, 0, 0, 137,
	0, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 0, 0, 843, 0, 0, 844,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 714, 0, 0, 0, 137, 0, 139, 0, 0,
	211, 153, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	0, 713, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 119, 0, 0, 0, 0, 265, 0,
	0, 0, 0, 184, 0, 215, 122, 136, 97, 83,
	93, 0, 121, 162, 191, 195, 0, 0, 0, 105,
	0, 193, 172, 231, 0, 174, 192, 140, 221, 185,
	230, 240, 241, 218, 238, 245, 208, 86, 217, 229,
	102, 203, 88, 227, 214, 151, 131, 132, 87, 0,
	189, 110, 117, 107, 164, 224, 225, 106, 248, 94,
	237, 90, 95, 236, 158, 220, 228, 152, 145, 89,
	226, 150, 144, 135, 114, 124, 182, 142, 183, 125,
	155, 154, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 234, 249, 99, 0, 219, 243, 244, 0, 0,
	100, 118, 113, 0, 181, 157, 96, 127, 209, 134,
	141, 188, 247, 171, 194, 103, 233, 210, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 91, 138,
	246, 186, 116, 235, 0, 0, 109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	85, 92, 98, 104, 108, 112, 115, 120, 123, 126,
	128, 129, 130, 133, 143, 146, 147, 148, 149, 159,
	160, 161, 163, 166, 167, 168, 169, 170, 173, 175,
	176, 177, 178, 179, 180, 187, 190, 196, 197, 198,
	199, 200, 201, 202, 204, 205, 206, 207, 213, 216,
	222, 223, 232, 239, 242, 165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 111, 0, 0, 0, 0,
	0, 137, 0, 139, 0, 0, 211, 153, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 0, 0, 692, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 119,
	0, 0, 0, 0, 265, 0, 0, 0, 0, 184,
	0, 215, 122, 136, 97, 83, 93, 0, 121, 162,
	191, 195, 0, 0, 0, 105, 0, 193, 172, 231,
	0, 174, 192, 140, 221, 185, 230, 240, 241, 218,
	238, 245, 208, 86, 217, 229, 102, 203, 88, 227,
	214, 151, 131, 132, 87, 0, 189, 110, 117, 107,
	164, 224, 225, 106, 248, 94, 237, 90, 95, 236,
	158, 220, 228, 152, 145, 89, 226, 150, 144, 135,
	114, 124, 182, 142, 183, 125, 155, 154, 156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 212, 234, 249, 99,
	0, 219, 243, 244, 0, 0, 100, 118, 113, 0,
	181, 157, 96, 127, 209, 134, 141, 188, 247, 171,
	194, 103, 233, 210, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 91, 138, 246, 186, 116, 235,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 85, 92, 98, 104,
	108, 112, 115, 120, 123, 126, 128, 129, 130, 133,
	143, 146, 147, 148, 149, 159, 160, 161, 163, 166,
	167, 168, 169, 170, 173, 175, 176, 177, 178, 179,
	180, 187, 190, 196, 197, 198, 199, 200, 201, 202,
	204, 205, 206, 207, 213, 216, 222, 223, 232, 239,
	242, 165, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 111, 0, 0, 0, 0, 0, 137, 0, 139,
	0, 0, 211, 153, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 0, 951, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 119, 0, 0, 0, 0,
	265, 0, 0, 0, 0, 184, 0, 215, 122, 136,
	97, 83, 93, 0, 121, 162, 191, 195, 0, 0,
	0, 105, 0, 193, 172, 231, 0, 174, 192, 140,
	221, 185, 230, 240, 241, 218, 238, 245, 208, 86,
	217, 229, 102, 203, 88, 227, 214, 151, 131, 132,
	87, 0, 189, 110, 117, 107, 164, 224, 225, 106,
	248, 94, 237, 90, 95, 236, 158, 220, 228, 152,
	145, 89, 226, 150, 144, 135, 114, 124, 182, 142,
	183, 125, 155, 154, 156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 234, 249, 99, 0, 219, 243, 244,
	0, 0, 100, 118, 113, 0, 181, 157, 96, 127,
	209, 134, 141, 188, 247, 171, 194, 103, 233, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	91, 138, 246, 186, 116, 235, 0, 0, 109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 85, 92, 98, 104, 108, 112, 115, 120,
	123, 126, 128, 129, 130, 133, 143, 146, 147, 148,
	149, 159, 160, 161, 163, 166, 167, 168, 169, 170,
	173, 175, 176, 177, 178, 179, 180, 187, 190, 196,
	197, 198, 199, 200, 201, 202, 204, 205, 206, 207,
	213, 216, 222, 223, 232, 239, 242, 165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 111, 0, 0,
	0, 0, 0, 137, 0, 139, 0, 0, 211, 153,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 601,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 0, 0, 265, 0, 0, 0,
	0, 184, 0, 215, 122, 136, 97, 83, 93, 0,
	121, 162, 191, 195, 0, 0, 0, 105, 0, 193,
	172, 231, 0, 174, 192, 140, 221, 185, 230, 240,
	241, 218, 238, 245, 208, 86, 217, 229, 102, 203,
	88, 227, 214, 151, 131, 132, 87, 0, 189, 110,
	117, 107, 164, 224, 225, 106, 248, 94, 237, 90,
	95, 236, 158, 220, 228, 152, 145, 89, 226, 150,
	144, 135, 114, 124, 182, 142, 183, 125, 155, 154,
	156, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 234,
	249, 99, 0, 219, 243, 244, 0, 0, 100, 118,
	113, 0, 181, 157, 96, 127, 209, 134, 141, 188,
	247, 171, 194, 103, 233, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 91, 138, 246, 186,
	116, 235, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 85, 92,
	98, 104, 108, 112, 115, 120, 123, 126, 128, 129,
	130, 133, 143, 146, 147, 148, 149, 159, 160, 161,
	163, 166, 167, 168, 169, 170, 173, 175, 176, 177,
	178, 179, 180, 187, 190, 196, 197, 198, 199, 200,
	201, 202, 204, 205, 206, 207, 213, 216, 222, 223,
	232, 239, 242, 165, 0, 0, 0, 0, 0, 0,
	0, 0, 683, 111, 0, 0, 0, 0, 0, 137,
	0, 139, 0, 0, 211, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 263, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 119, 0, 0,
	0, 0, 265, 0, 0, 0, 0, 184, 0, 215,
	122, 136, 97, 83, 93, 0, 121, 162, 191, 195,
	0, 0, 0, 105, 0, 193, 172, 231, 0, 174,
	192, 140, 221, 185, 230, 240, 241, 218, 238, 245,
	208, 86, 217, 229, 102, 203, 88, 227, 214, 151,
	131, 132, 87, 0, 189, 110, 117, 107, 164, 224,
	225, 106, 248, 94, 237, 90, 95, 236, 158, 220,
	228, 152, 145, 89, 226, 150, 144, 135, 114, 124,
	182, 142, 183, 125, 155, 154, 156, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 234, 249, 99, 0, 219,
	243, 244, 0, 0, 100, 118, 113, 0, 181, 157,
	96, 127, 209, 134, 141, 188, 247, 171, 194, 103,
	233, 210, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 91, 138, 246, 186, 116, 235, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 85, 92, 98, 104, 108, 112,
	115, 120, 123, 126, 128, 129, 130, 133, 143, 146,
	147, 148, 149, 159, 160, 161, 163, 166, 167, 168,
	169, 170, 173, 175, 176, 177, 178, 179, 180, 187,
	190, 196, 197, 198, 199, 200, 201, 202, 204, 205,
	206, 207, 213, 216, 222, 223, 232, 239, 242, 379,
	0, 0, 0, 0, 0, 0, 165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 0, 0, 0,
	0, 0, 137, 0, 139, 0, 0, 211, 153, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 263, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 0, 0, 265, 0, 0, 0, 0,
	184, 0, 215, 122, 136, 97, 83, 93, 0, 121,
	162, 191, 195, 0, 0, 0, 105, 0, 193, 172,
	231, 0, 174, 192, 140, 221, 185, 230, 240, 241,
	218, 238, 245, 208, 86, 217, 229, 102, 203, 88,
	227, 214, 151, 131, 132, 87, 0, 189, 110, 117,
	107, 164, 224, 225, 106, 248, 94, 237, 90, 95,
	236, 158, 220, 228, 152, 145, 89, 226, 150, 144,
	135, 114, 124, 182, 142, 183, 125, 155, 154, 156,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 234, 249,
	99, 0, 219, 243, 244, 0, 0, 100, 118, 113,
	0, 181, 157, 96, 127, 209, 134, 141, 188, 247,
	171, 194, 103, 233, 210, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 91, 138, 246, 186, 116,
	235, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 85, 92, 98,
	104, 108, 112, 115, 120, 123, 126, 128, 129, 130,
	133, 143, 146, 147, 148, 149, 159, 160, 161, 163,
	166, 167, 168, 169, 170, 173, 175, 176, 177, 178,
	179, 180, 187, 190, 196, 197, 198, 199, 200, 201,
	202, 204, 205, 206, 207, 213, 216, 222, 223, 232,
	239, 242, 165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 111, 0, 0, 0, 0, 0, 137, 0,
	139, 0, 0, 211, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 263, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 119, 0, 260, 0,
	0, 265, 0, 0, 0, 0, 184, 0, 215, 122,
	136, 97, 83, 93, 0, 121, 162, 191, 195, 0,
	0, 0, 105, 0, 193, 172, 231, 0, 174, 192,
	140, 221, 185, 230, 240, 241, 218, 238, 245, 208,
	86, 217, 229, 102, 203, 88, 227, 214, 151, 131,
	132, 87, 0, 189, 110, 117, 107, 164, 224, 225,
	106, 248, 94, 237, 90, 95, 236, 158, 220, 228,
	152, 145, 89, 226, 150, 144, 135, 114, 124, 182,
	142, 183, 125, 155, 154, 156, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 234, 249, 99, 0, 219, 243,
	244, 0, 0, 100, 118, 113, 0, 181, 157, 96,
	127, 209, 134, 141, 188, 247, 171, 194, 103, 233,
	210, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 91, 138, 246, 186, 116, 235, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 85, 92, 98, 104, 108, 112, 115,
	120, 123, 126, 128, 129, 130, 133, 143, 146, 147,
	148, 149, 159, 160, 161, 163, 166, 167, 168, 169,
	170, 173, 175, 176, 177, 178, 179, 180, 187, 190,
	196, 197, 198, 199, 200, 201, 202, 204, 205, 206,
	207, 213, 216, 222, 223, 232, 239, 242, 165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 111, 0,
	0, 0, 0, 0, 137, 0, 139, 0, 0, 211,
	153, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 0, 0, 0, 0, 265, 0, 0,
	0, 0, 184, 0, 215, 122, 136, 97, 83, 93,
	0, 121, 162, 191, 195, 0, 0, 0, 105, 0,
	193, 172, 231, 0, 174, 192, 140, 221, 185, 230,
	240, 241, 218, 238, 245, 208, 86, 217, 229, 102,
	203, 88, 227, 214, 151, 131, 132, 87, 0, 189,
	110, 117, 107, 164, 224, 225, 106, 248, 94, 237,
	90, 95, 236, 158, 220, 228, 152, 145, 89, 226,
	150, 144, 135, 114, 124, 182, 142, 183, 125, 155,
	154, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	234, 249, 99, 0, 219, 243, 244, 0, 0, 100,
	118, 113, 0, 181, 157, 96, 127, 209, 134, 141,
	188, 247, 171, 194, 103, 233, 210, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 91, 138, 246,
	186, 116, 235, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 85,
	92, 98, 104, 108, 112, 115, 120, 123, 126, 128,
	129, 130, 133, 143, 146, 147, 148, 149, 159, 160,
	161, 163, 166, 167, 168, 169, 170, 173, 175, 176,
	177, 178, 179, 180, 187, 190, 196, 197, 198, 199,
	200, 201, 202, 204, 205, 206, 207, 213, 216, 222,
	223, 232, 239, 242, 165, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 0, 0, 0, 0, 0,
	137, 0, 139, 0, 0, 211, 153, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 263, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 265, 0, 0, 0, 0, 184, 0,
	215, 122, 136, 97, 83, 93, 0, 121, 162, 191,
	195, 0, 0, 0, 105, 0, 193, 172, 231, 0,
	174, 192, 140, 221, 185, 230, 240, 241, 218, 238,
	245, 208, 86, 217, 229, 102, 203, 88, 227, 214,
	151, 131, 132, 87, 0, 189, 110, 117, 107, 164,
	224, 225, 106, 248, 94, 237, 90, 95, 236, 158,
	220, 228, 152, 145, 89, 226, 150, 144, 135, 114,
	124, 182, 142, 183, 125, 155, 154, 156, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 212, 234, 249, 99, 0,
	219, 243, 244, 0, 0, 100, 118, 113, 0, 181,
	157, 96, 127, 209, 134, 141, 188, 247, 171, 194,
	103, 233, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 91, 138, 246, 186, 116, 235, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 85, 92, 98, 104, 108,
	112, 115, 120, 123, 126, 128, 129, 130, 133, 143,
	146, 147, 148, 149, 159, 160, 161, 163, 166, 167,
	168, 169, 170, 173, 175, 176, 177, 178, 179, 180,
	187, 190, 196, 197, 198, 199, 200, 201, 202, 204,
	205, 206, 207, 213, 216, 222, 223, 232, 239, 242,
	165, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 0, 0, 0, 0, 0, 137, 0, 139, 0,
	0, 211, 153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	320, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 119, 0, 0, 0, 0, 265,
	0, 0, 0, 0, 184, 0, 215, 122, 136, 97,
	83, 93, 0, 121, 162, 191, 195, 0, 0, 0,
	105, 0, 193, 172, 231, 0, 174, 192, 140, 221,
	185, 230, 240, 241, 218, 238, 245, 208, 86, 217,
	229, 102, 203, 88, 227, 214, 151, 131, 132, 87,
	0, 189, 110, 117, 107, 164, 224, 225, 106, 248,
	94, 237, 90, 95, 236, 158, 220, 228, 152, 145,
	89, 226, 150, 144, 135, 114, 124, 182, 142, 183,
	125, 155, 154, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 234, 249, 99, 0, 219, 243, 244, 0,
	0, 100, 118, 113, 0, 181, 157, 96, 127, 209,
	134, 141, 188, 247, 171, 194, 103, 233, 210, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 91,
	138, 246, 186, 116, 235, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 92, 98, 104, 108, 112, 115, 120, 123,
	126, 128, 129, 130, 133, 143, 146, 147, 148, 149,
	159, 160, 161, 163, 166, 167, 168, 169, 170, 173,
	175, 176, 177, 178, 179, 180, 187, 190, 196, 197,
	198, 199, 200, 201, 202, 204, 205, 206, 207, 213,
	216, 222, 223, 232, 239, 242,
}
var yyPact = [...]int{

	2059, -1000, -278, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 934, 982, -1000, -1000, -1000, -1000, -1000, -1000,
	255, 11771, 44, 119, 11, 15954, 113, 123, 16646, -1000,
	10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -66, -67,
	-1000, 719, -1000, -1000, -1000, -1000, -1000, 927, 932, 725,
	919, 850, -1000, 8299, 83, 83, 15608, 6569, -1000, -1000,
	272, 16646, 108, 16646, -157, 81, 81, 81, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	111, 16646, 185, -1000, 16646, 77, 564, 77, 77, 77,
	16646, -1000, 170, -1000, -1000, -1000, 16646, 554, 880, 3338,
	55, 3338, -1000, 3338, 3338, -1000, 3338, 25, 3338, -74,
	952, 26, 2, -1000, 3338, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 391, 887,
	9695, 9695, 934, -1000, 719, -1000, -1000, -1000, 881, -1000,
	-1000, 336, 962, -1000, 11425, 165, -1000, 9695, 1609, 686,
	-1000, -1000, 686, -1000, -1000, 144, -1000, -1000, 10733, 10733,
	10733, 10733, 10733, 10733, 10733, 10733, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	686, -1000, 9349, 686, 686, 686, 686, 686, 686, 686,
	686, 9695, 686, 686, 686, 686, 686, 686, 686, 686,
	686, 686, 686, 686, 686, 686, 686, 15255, 14217, 16646,
	710, 706, -1000, -1000, 163, 705, 6210, -109, -1000, -1000,
	-1000, 301, 13871, -1000, -1000, -1000, 878, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 631, 16646, -1000, 2316,
	-1000, 549, 3338, 91, 543, 314, 535, 16646, 16646, 3338,
	37, 66, 62, 16646, 716, 88, 16646, 912, 817, 16646,
	533, 529, -1000, 5851, -1000, 3338, 3338, -1000, -1000, -1000,
	3338, 3338, 3338, 16646, 3338, 3338, -1000, -1000, -1000, -1000,
	3338, 3338, -1000, 960, 293, -1000, -1000, -1000, -1000, 9695,
	233, -1000, 816, -1000, -1000, -1000, -1000, -1000, 923, 977,
	198, 546, 160, 709, -1000, 446, 927, 391, 850, 13525,
	832, -1000, -1000, 16646, -1000, 9695, 9695, 488, -1000, 14909,
	-1000, -1000, 4415, 217, 10733, 460, 261, 10733, 10733, 10733,
	10733, 10733, 10733, 10733, 10733, 10733, 10733, 10733, 10733, 10733,
	10733, 10733, 387, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 526, -1000, 719, 675, 675, 176, 176, 176, 176,
	176, 176, 176, 11079, 7607, 391, 629, 318, 9349, 8299,
	8299, 9695, 9695, 8991, 8645, 8299, 916, 309, 318, 16992,
	-1000, -1000, 10387, -1000, -1000, -1000, -1000, -1000, 391, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16300, 16300, 8299, 8299,
	8299, 8299, 48, 16646, -1000, 674, 983, -1000, -1000, -1000,
	914, 12833, 686, 13179, 48, 654, 14217, 16646, -1000, -1000,
	14217, 16646, 4056, 5492, 705, -109, 671, -1000, -113, -122,
	7261, 174, -1000, -1000, -1000, -1000, -81, 264, 618, 116,
	-58, -1000, -1000, -1000, 724, -1000, 724, 724, 724, 724,
	-14, -14, -14, -14, -1000, -1000, -1000, -1000, -1000, 751,
	750, 749, 746, -1000, -1000, -1000, 724, 724, 724, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 745, 745, 745, 729, 729,
	729, 729, 764, -1000, 16646, -102, 905, 3338, -1000, 75,
	-1000, 16646, 16646, 16646, 16646, 16646, 136, 16646, 16646, 701,
	-1000, 16646, 3338, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 16646, 389,
	16646, 16646, 318, -1000, 473, 209, 16646, -1000, 525, -1000,
	836, 9695, 9695, 5133, 9695, -1000, -1000, -1000, 887, -1000,
	916, 936, -1000, 870, 869, 8299, -1000, -1000, 217, 271,
	-1000, -1000, 341, -1000, -1000, -1000, -1000, 158, 686, -1000,
	1979, -1000, -1000, -1000, -1000, 460, 10733, 10733, 10733, 390,
	1979, 1804, 1476, 733, 176, 551, 551, 257, 257, 257,
	257, 257, 527, 527, -1000, -1000, -1000, 391, -1000, -1000,
	-1000, 391, 8299, 700, -1000, -1000, 9695, -1000, 391, 624,
	624, 458, 515, 234, 959, 624, 229, 954, 624, 624,
	8299, 328, -1000, 9695, 391, -1000, 155, -1000, 405, 691,
	673, 624, 391, 624, 624, 685, 686, -1000, 16992, 14217,
	14217, 14217, 14217, 14217, -1000, 847, 845, -1000, 834, 831,
	840, 16646, -1000, 626, 12833, 6915, 169, 686, -1000, 14563,
	-1000, -1000, 950, 14217, 677, -1000, 677, -1000, 151, -1000,
	-1000, 671, -109, -94, -1000, -1000, -1000, -1000, 318, -1000,
	409, -1000, 300, -1000, -1000, -1000, 742, 516, -1000, 898,
	194, 202, 507, 897, -1000, -1000, -1000, 884, -1000, 325,
	-1000, -61, -1000, -1000, 404, -14, -14, -1000, -1000, 174,
	876, 174, 174, 174, 467, 467, 467, 467, -1000, -1000,
	-1000, -1000, 388, -1000, -1000, -1000, 385, -1000, -1000, -1000,
	811, 16300, 3338, -1000, 298, -1000, -1000, -1000, 342, 342,
	199, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 47, 753, -1000, -1000, -1000, -1000, 14, 35,
	87, -1000, 3338, -1000, 293, 927, 466, 205, 9695, -1000,
	-1000, -1000, 464, -1000, -1000, 857, 318, 318, 150, -1000,
	-1000, 16646, -1000, -1000, -1000, -1000, 689, -1000, -1000, -1000,
	3697, 8299, -1000, 390, 1979, 1789, -1000, 10733, 10733, -1000,
	-1000, 624, 8299, 318, -1000, -1000, -1000, 60, 387, 60,
	10733, 10733, -1000, 10733, 10733, -1000, -169, 692, 235, -1000,
	9695, 506, -1000, 5133, -1000, 10733, 10733, -1000, -1000, -1000,
	-1000, 798, 16992, 686, -1000, 12475, 16300, 697, -1000, 289,
	983, 736, 796, 1001, -1000, -1000, -1000, -1000, 841, -1000,
	835, -1000, -1000, -1000, -1000, 391, 670, -1000, -1000, 318,
	686, 686, -1000, 107, 99, 98, 16300, -1000, 934, 9695,
	677, -1000, -1000, 186, -1000, -1000, -118, -131, -1000, -1000,
	-1000, 2979, 16300, 64, -1000, 507, 507, -1000, -1000, -1000,
	732, 795, 10733, -1000, -1000, -1000, 600, 174, 174, -1000,
	207, -1000, -1000, -1000, 617, -1000, 615, 612, 608, 666,
	606, 16646, -1000, -1000, 2979, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	16646, -1000, -1000, -1000, -1000, -1000, 16300, -183, 502, 16300,
	16300, 16300, 16646, -1000, 389, -1000, -1000, 457, 318, -1000,
	-1000, 4774, -1000, 950, 14217, -1000, -1000, 391, -1000, 10733,
	1979, 1979, -1000, -1000, 391, 724, 724, -1000, 724, 729,
	-1000, 724, 8, 724, 4, 391, 391, 1734, 1680, 1646,
	758, 686, -164, -1000, 318, 9695, -1000, 1551, 1279, 923,
	888, 637, 658, -1000, -1000, 7953, 391, 591, 143, 589,
	-1000, 934, 16992, 9695, -1000, -1000, 9695, 728, -1000, 9695,
	-1000, -1000, -1000, 914, 6915, 14217, 16992, 686, 686, 686,
	589, 927, 318, -1000, -1000, -1000, -1000, 726, -1000, -1000,
	-1000, 585, -1000, 724, -1000, -1000, -1000, 16300, -52, 976,
	1979, -1000, -1000, -1000, -1000, -1000, -14, 456, -14, -14,
	-14, 382, -1000, 379, 3338, -1000, -1000, -1000, -1000, -1000,
	901, -1000, 4774, -1000, -1000, 723, 755, -1000, -1000, -1000,
	-1000, 939, 662, -1000, 1979, -1000, -1000, 118, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 10733, 10733, 10733, 10733,
	10733, 391, 451, 318, 10733, 10733, -1000, 896, -1000, 686,
	-1000, -1000, 785, 16300, 16300, -1000, 16300, 927, -1000, 318,
	318, 16300, 318, 16646, -1000, 933, 391, 16300, 16300, 16300,
	12117, -1000, 2979, 152, 16300, -1000, 583, -1000, 180, -1000,
	-162, 174, -1000, 174, 174, 174, 586, 580, -1000, 686,
	659, -1000, 243, 16300, 16646, 937, 930, -1000, -1000, 405,
	405, 405, 405, 50, -1000, -1000, 405, 405, 975, -1000,
	686, -1000, 719, 137, -1000, -1000, -1000, 547, -1000, -1000,
	-1000, 541, 541, 541, 169, 577, 152, -1000, 491, 236,
	437, -1000, 61, 16300, 332, 895, -1000, 893, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 46, 4774, 2979, 521, -1000,
	-1000, 9695, 9695, -1000, -1000, -1000, -1000, 391, 56, -187,
	-1000, -1000, 16992, 658, 391, 16300, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 353, -1000, -1000, 16646, -1000, -1000,
	418, -1000, -1000, 512, -1000, 16300, -1000, -1000, 753, 318,
	643, -1000, 855, -174, -193, 639, -1000, -1000, -1000, 718,
	-1000, -1000, 46, 867, -183, -1000, 854, -1000, 16300, -1000,
	43, -1000, -185, 485, 41, -191, 792, 686, -194, 786,
	-1000, 958, 10041, -1000, -1000, 965, 179, 179, 405, 391,
	-1000, -1000, -1000, 65, 373, -1000, -1000, -1000, -1000, -1000,
	-1000,
}
var yyPgo = [...]int{

	0, 1236, 30, 535, 1235, 1234, 1229, 1226, 1225, 1222,
	1220, 1219, 1215, 1212, 1210, 1209, 1207, 1206, 1204, 1203,
	1201, 1198, 1197, 1196, 1192, 1183, 91, 1182, 1181, 1180,
	75, 1179, 78, 1178, 1177, 49, 217, 43, 52, 1326,
	1176, 45, 33, 81, 1171, 1170, 1167, 40, 1166, 1165,
	25, 1164, 1163, 1162, 79, 1159, 1158, 60, 1155, 1154,
	1422, 1153, 65, 1152, 12, 47, 1151, 1150, 1149, 1148,
	77, 481, 1146, 1143, 16, 1141, 1140, 92, 1138, 54,
	8, 14, 15, 24, 1137, 27, 6, 1135, 57, 1134,
	1132, 1131, 1124, 28, 1123, 66, 1122, 19, 61, 29,
	1121, 10, 73, 38, 23, 7, 83, 70, 1120, 26,
	71, 56, 1119, 1118, 545, 1117, 1116, 50, 1114, 1113,
	34, 1112, 115, 444, 1111, 1109, 1104, 1088, 55, 0,
	638, 183, 76, 1087, 1084, 1082, 1468, 46, 58, 18,
	21, 80, 20, 48, 1080, 1079, 42, 1078, 1077, 1076,
	1074, 1071, 1070, 1069, 22, 1068, 1067, 1066, 110, 35,
	1065, 1064, 69, 44, 1062, 1061, 1060, 51, 64, 1056,
	1052, 59, 41, 1049, 1042, 1036, 1034, 11, 1021, 17,
	1020, 9, 1018, 37, 1014, 5, 1011, 13, 1009, 2,
	1006, 4, 53, 3, 1005, 1, 1003, 1000, 62, 351,
	84, 991, 85,
}
var yyR1 = [...]int{

	0, 196, 197, 197, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 6, 3, 4,
	4, 5, 5, 7, 7, 29, 29, 8, 9, 9,
	9, 9, 200, 200, 54, 54, 55, 55, 102, 102,
	10, 10, 10, 10, 107, 107, 111, 111, 111, 112,
	112, 112, 112, 144, 144, 11, 11, 11, 11, 11,
	11, 11, 191, 191, 190, 189, 189, 188, 188, 187,
	17, 174, 176, 176, 175, 175, 175, 175, 168, 147,
	147, 147, 147, 150, 150, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 149, 149, 149, 149, 149, 149, 149, 151,
	151, 151, 151, 151, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 153, 153, 153, 153, 153, 153, 153,
	153, 167, 167, 154, 154, 162, 162, 163, 163, 163,
	160, 160, 161, 161, 164, 164, 164, 164, 156, 156,
	157, 157, 165, 165, 158, 158, 158, 159, 159, 159,
	166, 166, 166, 166, 166, 155, 155, 169, 169, 182,
	182, 181, 181, 181, 173, 173, 178, 178, 178, 178,
	178, 171, 171, 172, 172, 180, 180, 179, 170, 170,
	183, 183, 183, 183, 194, 195, 193, 193, 193, 193,
	193, 45, 45, 45, 46, 46, 177, 177, 177, 12,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 186, 184, 184, 185,
	185, 13, 18, 18, 14, 14, 14, 14, 14, 15,
	15, 19, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	118, 118, 116, 116, 119, 119, 117, 117, 117, 120,
	120, 120, 120, 121, 121, 121, 145, 145, 145, 21,
	21, 23, 23, 24, 25, 22, 22, 22, 22, 22,
	22, 22, 16, 201, 26, 27, 27, 28, 28, 28,
	32, 32, 32, 30, 30, 31, 31, 37, 37, 36,
	36, 38, 38, 38, 38, 133, 133, 133, 132, 132,
	40, 40, 41, 41, 42, 42, 43, 43, 43, 43,
	43, 43, 63, 63, 52, 52, 51, 51, 50, 53,
	53, 53, 101, 101, 103, 103, 44, 44, 44, 44,
	47, 47, 48, 48, 49, 49, 140, 140, 139, 139,
	139, 138, 138, 56, 56, 56, 58, 57, 57, 57,
	57, 59, 59, 61, 61, 60, 60, 62, 64, 64,
	64, 64, 65, 65, 39, 39, 39, 39, 39, 39,
	39, 115, 115, 67, 67, 66, 66, 66, 66, 66,
	66, 66, 66, 66, 66, 78, 78, 78, 78, 78,
	78, 68, 68, 68, 68, 68, 68, 68, 35, 35,
	79, 79, 79, 85, 80, 80, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 75, 75,
	75, 73, 73, 73, 73, 73, 73, 73, 73, 73,
	73, 73, 73, 73, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	202, 202, 77, 76, 76, 76, 76, 76, 76, 33,
	33, 33, 33, 33, 143, 143, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 89,
	89, 34, 34, 87, 87, 88, 90, 90, 86, 86,
	86, 70, 70, 70, 70, 70, 70, 70, 70, 72,
	72, 72, 91, 91, 92, 92, 93, 93, 94, 94,
	95, 96, 96, 96, 97, 97, 97, 97, 98, 98,
	98, 99, 99, 69, 69, 69, 69, 69, 69, 100,
	100, 100, 100, 104, 104, 81, 81, 83, 83, 82,
	84, 105, 105, 109, 106, 106, 110, 110, 110, 110,
	108, 108, 108, 135, 135, 135, 113, 113, 122, 122,
	123, 123, 114, 114, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 125, 125, 125, 126, 126, 127,
	127, 127, 134, 134, 130, 130, 131, 131, 136, 136,
	137, 137, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 198,
	199, 141, 142, 142, 142,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 5, 6, 7, 5, 10, 1,
	3, 1, 3, 8, 8, 1, 1, 9, 8, 7,
	6, 6, 1, 1, 1, 3, 1, 3, 0, 4,
	3, 4, 5, 4, 1, 3, 3, 2, 2, 2,
	2, 2, 1, 1, 1, 2, 2, 8, 4, 6,
	5, 5, 0, 2, 1, 0, 2, 1, 3, 3,
	4, 4, 2, 4, 1, 3, 3, 3, 8, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 2, 2, 1,
	2, 2, 2, 1, 4, 4, 2, 2, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 6, 6, 6,
	6, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 3, 0, 5, 0, 3, 5,
	0, 1, 0, 1, 0, 1, 2, 1, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 3, 6, 0, 3, 1, 1, 1, 6,
	7, 7, 7, 7, 4, 5, 7, 5, 5, 5,
	12, 7, 5, 9, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 7, 1, 3, 8,
	8, 3, 3, 5, 4, 6, 5, 4, 4, 3,
	2, 3, 4, 4, 3, 4, 4, 4, 4, 4,
	4, 3, 2, 3, 3, 2, 3, 4, 3, 7,
	6, 4, 2, 4, 4, 3, 3, 5, 2, 3,
	1, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 3, 2, 0, 2, 3, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 2, 2, 2, 2, 2,
	3, 3, 2, 0, 2, 0, 2, 1, 2, 2,
	0, 1, 1, 0, 1, 0, 1, 0, 1, 1,
	3, 1, 2, 3, 5, 0, 1, 2, 1, 1,
	0, 2, 1, 3, 1, 1, 1, 3, 1, 3,
	5, 6, 3, 7, 0, 1, 1, 3, 1, 1,
	4, 4, 1, 3, 1, 3, 4, 4, 4, 3,
	2, 4, 0, 1, 0, 2, 0, 1, 0, 1,
	2, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 3, 1, 1, 1, 1, 4, 5,
	6, 4, 4, 6, 6, 6, 8, 8, 8, 8,
	9, 7, 5, 4, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	0, 2, 3, 4, 4, 4, 4, 4, 4, 0,
	3, 4, 7, 3, 1, 1, 2, 3, 3, 1,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 0,
	1, 0, 2, 1, 2, 4, 0, 2, 1, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 0, 3, 0, 2, 0, 3, 1, 3,
	2, 0, 1, 1, 0, 2, 4, 4, 0, 2,
	4, 0, 2, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -196, -1, -2, -6, -7, -8, -9, -10, -11,
	-12, -13, -14, -15, -19, -20, -21, -23, -24, -25,
	-22, -16, -3, -4, 6, 7, -29, 9, 10, 31,
	-17, 116, 117, 119, 118, 152, 120, 145, 51, 166,
	167, 169, 170, 26, 146, 147, 150, 151, 32, 33,
	122, -198, 8, 266, 55, -197, 364, -93, 15, -28,
	5, -26, -201, -26, -26, -26, -26, -26, -174, -176,
	55, 91, -127, 127, 73, 258, 123, 124, 131, -130,
	58, -129, 276, 138, 308, 309, 166, 177, 171, 198,
	190, 277, 310, 139, 188, 191, 245, 137, 311, 232,
	239, 67, 169, 254, 312, 148, 186, 182, 313, 285,
	180, 28, 314, 241, 203, 315, 281, 181, 240, 122,
	316, 141, 135, 317, 204, 208, 318, 246, 319, 320,
	321, 175, 176, 322, 248, 202, 136, 34, 278, 36,
	156, 249, 206, 323, 201, 197, 324, 325, 326, 327,
	200, 174, 196, 40, 210, 209, 211, 244, 193, 328,
	329, 330, 142, 331, 183, 18, 332, 333, 334, 335,
	336, 252, 151, 337, 154, 338, 339, 340, 341, 342,
	343, 243, 205, 207, 132, 158, 280, 344, 250, 179,
	345, 143, 155, 150, 253, 144, 346, 347, 348, 349,
	350, 351, 352, 170, 353, 354, 355, 356, 165, 247,
	256, 39, 229, 357, 173, 134, 358, 167, 162, 234,
	194, 157, 359, 360, 184, 185, 199, 172, 195, 168,
	159, 152, 361, 255, 230, 282, 192, 189, 163, 362,
	160, 161, 363, 235, 236, 164, 279, 251, 187, 231,
	-114, 127, 236, 129, 124, 124, 126, 127, 258, 123,
	124, -60, -136, 58, -129, 127, 124, 109, 191, 245,
	116, 233, 241, 126, 34, 243, 158, -145, 124, -116,
	232, 235, 236, 164, 58, 247, 246, 237, -136, 168,
	-141, -141, -141, -141, -141, 234, 234, -141, -2, -97,
	17, 16, -5, -3, -198, 6, 21, 22, -32, 41,
	42, -27, -38, 100, -39, -136, -66, 75, -71, 30,
	58, -129, 24, -70, -67, -86, -84, -85, 109, 110,
	111, 98, 99, 106, 76, 112, -75, -73, -74, -76,
	60, 59, 68, 61, 62, 63, 64, 69, 70, 71,
	-130, -82, -198, 45, 46, 267, 268, 269, 270, 275,
	271, 78, 35, 257, 265, 264, 263, 261, 262, 259,
	260, 273, 274, 130, 258, 104, 266, -114, -114, 11,
	-54, -55, -60, -62, -136, -106, -144, 168, -110, 247,
	246, -131, -108, -130, -128, 245, 191, 244, 121, 283,
	74, 23, 25, 227, 77, 109, 16, 78, 108, 267,
	116, 49, 284, 259, 260, 257, 269, 270, 258, 233,
	30, 10, 286, 26, 146, 22, 102, 118, 81, 82,
	149, 24, 147, 71, 289, 19, 52, 11, 13, 290,
	291, 14, 130, 129, 93, 126, 47, 8, 112, 27,
	90, 43, 292, 29, 293, 294, 295, 296, 45, 91,
	17, 261, 262, 32, 297, 275, 153, 104, 50, 37,
	75, 298, 299, 69, 300, 72, 53, 73, 15, 48,
	301, 302, 303, 304, 92, 119, 266, 46, 305, 123,
	6, 272, 31, 145, 44, 306, 124, 80, 273, 274,
	128, 70, 5, 131, 33, 9, 51, 54, 263, 264,
	265, 35, 79, 12, 307, 20, -175, 91, -168, 58,
	-60, 126, -60, 266, -123, 130, -123, -123, 124, -60,
	116, 118, 121, 53, -18, -60, -122, 130, 58, -122,
	-122, -122, -60, 113, -60, 58, 31, -142, -198, -131,
	258, 58, 158, 124, 159, 127, -142, -142, -142, -142,
	162, 163, -142, -119, -118, 239, 240, 234, 238, 12,
	163, 234, 161, -142, -141, -141, -199, 57, -98, 19,
	32, -39, -136, -94, -95, -39, -93, -2, -26, 37,
	-30, 22, 66, 11, -133, 74, 73, 90, -132, 23,
	-130, 60, 113, -39, -68, 93, 75, 91, 92, 77,
	95, 94, 105, 98, 99, 100, 101, 102, 103, 104,
	96, 97, 108, 83, 84, 85, 86, 87, 88, 89,
	-115, -198, -85, -198, 114, 115, -71, -71, -71, -71,
	-71, -71, -71, -71, -198, -2, -80, -39, -198, -198,
	-198, -198, -198, -198, -198, -198, -198, -89, -39, -198,
	-202, -77, -198, -202, -77, -202, -77, -202, -198, -202,
	-77, -202, -77, -202, -202, -77, -198, -198, -198, -198,
	-198, -198, -61, 27, -60, -41, -42, -43, -44, -63,
	-85, -198, 58, -60, -60, -54, -200, 56, 11, 54,
	-200, 56, 113, 56, -106, 168, -107, -111, 248, 250,
	83, -135, -130, 60, 30, 31, 57, 56, -60, -147,
	-150, -152, -151, -153, -148, -149, 188, 189, 109, 192,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	222, 223, 31, 225, 60, 148, 184, 185, 186, 187,
	204, 205, 206, 207, 208, 209, 210, 211, 171, 190,
	277, 172, 173, 174, 175, 176, 177, 212, 213, 214,
	215, 216, 217, 218, 219, 179, 180, 181, 182, 183,
	220, 221, 58, -142, 127, 58, 75, 58, -60, -60,
	-142, 160, 160, 124, 124, 165, -60, 56, 128, -54,
	24, 53, -60, 58, 58, -137, -136, -128, -142, -142,
	-142, -142, -142, -60, -142, -142, -142, -142, 11, -117,
	11, 93, -39, -121, 91, 75, 53, -99, 20, 9,
	93, 56, 18, 113, 56, -96, 25, 26, -97, -199,
	-32, -72, -130, 61, 64, -31, 44, -60, -39, -39,
	-78, 69, 75, 70, 71, -132, 100, -137, -131, -128,
	-71, -79, -82, -85, 65, 93, 91, 92, 77, -71,
	-71, -71, -71, -71, -71, -71, -71, -71, -71, -71,
	-71, -71, -71, -71, -143, 58, 60, 58, -70, -70,
	-130, -37, 22, -36, -38, -199, 56, -199, -2, -36,
	-36, -39, -39, -86, 60, -36, -86, 60, -36, -36,
	-30, -87, -88, 79, -86, -130, -136, -199, -71, -130,
	-130, -36, -37, -36, -36, -102, 154, -60, 31, 56,
	-56, -58, -57, -59, 43, 47, 49, 44, 45, 46,
	50, -140, 23, -41, -198, -198, -139, 154, -138, 23,
	-136, 60, -102, 54, -41, -60, -41, -62, -136, 100,
	-110, -107, 56, 249, 251, 252, 53, 72, -39, -159,
	108, -45, 242, -168, -169, -170, -178, 140, -183, 132,
	134, 131, -171, 141, 126, 29, 57, -164, 69, 75,
	224, -160, 230, -154, 55, -154, -154, -154, -154, -158,
	191, -158, -158, -158, 55, 55, 55, 55, -154, -154,
	-154, -162, 55, -162, -162, -163, 55, -163, -163, -163,
	-134, 54, -60, -46, 242, 24, -142, -124, 121, 118,
	119, -186, 117, 227, 191, 67, 30, 15, 267, 154,
	282, 58, 155, -60, -60, -60, -60, -60, 121, 118,
	-60, -60, -60, -142, -60, -120, 91, 75, 12, -136,
	-136, 60, 91, -60, 58, 39, -39, -39, -137, -95,
	-98, -113, 19, 11, 35, 35, -36, 69, 70, 71,
	113, -198, -79, -71, -71, -71, -35, 149, 74, -199,
	-199, -36, 56, -39, -199, -199, -199, 56, 54, 23,
	11, 11, -199, 11, 11, -199, -199, -36, -90, -88,
	81, -39, -199, 113, -199, 56, 56, -199, -199, -199,
	-199, -69, 31, 35, -2, -198, -198, -105, -109, -86,
	-42, -43, -43, -42, -43, 43, 43, 43, 48, 43,
	48, 43, -57, -136, -199, -52, -51, -50, -53, -39,
	124, 125, -64, 51, 129, 52, -198, -138, -65, 12,
	-41, -65, -65, 113, -111, -112, 253, 250, 256, 58,
	60, 83, 55, 58, 29, -171, -171, -172, 58, -172,
	29, -156, 30, 69, -161, 231, 61, -158, -158, -159,
	31, -159, -159, -159, -167, 60, -167, -167, -167, 61,
	61, 53, -130, -142, 83, -141, -192, 137, 133, 140,
	141, 135, 58, 126, 29, 132, 134, 154, 131, -192,
	-125, -126, 128, 23, 126, 29, 154, -191, 54, 160,
	227, 160, 128, -142, -117, -97, 60, 91, -39, 60,
	40, 113, -60, -40, 11, 100, -131, -37, -35, 74,
	-71, -71, -199, -38, -146, 109, 188, 148, 186, 182,
	202, 193, 229, 184, 230, -143, -146, -71, -71, -71,
	-71, 276, -93, 82, -39, 80, -131, -71, -71, -104,
	53, -105, -81, -83, -82, -198, -2, -100, -130, -103,
	-130, -65, 56, 83, -48, -47, 53, 54, -49, 53,
	-47, 43, 43, -199, 56, -198, -198, 126, 126, 126,
	-103, -93, -39, -65, 250, 254, 255, -177, -131, 60,
	61, -180, -179, -130, -183, -172, -172, 55, -157, 53,
	-71, 57, -159, -159, 58, 109, 57, 56, 57, 57,
	57, 56, 57, 56, -60, -177, -141, -141, -60, -141,
	-130, -189, 279, -190, 58, -130, -130, -130, -60, -120,
	60, -65, -41, -199, -71, -199, -154, -154, -154, -163,
	-154, 176, -154, 176, -199, -199, 19, 19, 19, 19,
	-198, -34, 272, -39, 56, 56, -99, 28, -104, 56,
	-199, -199, -199, 56, 113, -199, 56, -93, -109, -39,
	-39, 55, -39, -140, -50, -42, -86, -198, -198, -198,
	-199, -97, 55, 57, 56, -154, -101, -130, -165, 227,
	9, -158, 60, -158, -158, -158, 61, 61, -142, 27,
	-188, -187, -131, 55, 54, -91, 13, -158, 58, -71,
	-71, -71, -71, -71, -199, 60, -71, -71, 29, -83,
	35, -2, -198, -130, -130, -130, -97, -101, -136, -199,
	-199, -101, -101, -101, -139, -177, -182, -181, 54, 136,
	67, -179, 57, 56, -166, 132, 29, 131, -74, -159,
	-159, -159, -159, 57, 57, -198, 56, 83, -101, -60,
	-92, 14, 16, -199, -199, -199, -199, -33, 93, 279,
	-199, -199, 9, -81, -2, 113, 57, -199, -199, -199,
	-64, 57, -181, 58, -173, 83, 60, 143, -130, -155,
	67, 29, 29, -184, -185, 154, -187, -177, 57, -39,
	-80, -199, 277, 50, 280, -105, -199, -130, 61, -60,
	60, -199, 56, -130, -191, 40, 278, 281, 55, -185,
	35, -189, 40, -101, 156, 279, 57, 157, 280, -194,
	-195, 53, -198, 281, -195, 53, 10, 9, -71, 153,
	-193, 144, 139, 142, 31, -193, -199, -199, 138, 30,
	69,
}
var yyDef = [...]int{

	23, -2, 2, -2, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 586, 0, 333, 333, 333, 333, 333, 333,
	0, 659, 642, 0, 0, 0, 0, -2, 320, 321,
	0, 323, 324, 961, 961, 961, 961, 961, 0, 0,
	961, 0, 35, 36, 959, 1, 3, 594, 0, 0,
	337, 340, 335, 0, 642, 642, 0, 0, 65, 66,
	0, 0, 0, 948, 0, 640, 640, 640, 660, 661,
	664, 665, 790, 791, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 807,
	808, 809, 810, 811, 812, 813, 814, 815, 816, 817,
	818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
	828, 829, 830, 831, 832, 833, 834, 835, 836, 837,
	838, 839, 840, 841, 842, 843, 844, 845, 846, 847,
	848, 849, 850, 851, 852, 853, 854, 855, 856, 857,
	858, 859, 860, 861, 862, 863, 864, 865, 866, 867,
	868, 869, 870, 871, 872, 873, 874, 875, 876, 877,
	878, 879, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
	898, 899, 900, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	0, 0, 0, 643, 0, 638, 0, 638, 638, 638,
	0, 270, 415, 668, 669, 948, 0, 0, 0, 962,
	0, 962, 282, 962, 962, 285, 962, 0, 962, 0,
	292, 0, 0, 298, 962, 317, 318, 303, 319, 322,
	325, 326, 327, 328, 329, 961, 961, 332, 29, 598,
	0, 0, 586, 31, 0, 333, 338, 339, 343, 341,
	342, 334, 0, 351, 355, 0, 424, 0, 429, 431,
	-2, -2, 0, 466, 467, 468, 469, 470, 0, 0,
	0, 0, 0, 0, 0, 0, 494, 495, 496, 497,
	571, 572, 573, 574, 575, 576, 577, 578, 433, 434,
	568, 620, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 559, 0, 530, 530, 530, 530, 530, 530, 530,
	530, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 46, 415, 50, 0, 937, 624, -2,
	-2, 0, 0, 666, 667, -2, 803, -2, 672, 673,
	674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 697, 698, 699, 700, 701, 702, 703,
	704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
	714, 715, 716, 717, 718, 719, 720, 721, 722, 723,
	724, 725, 726, 727, 728, 729, 730, 731, 732, 733,
	734, 735, 736, 737, 738, 739, 740, 741, 742, 743,
	744, 745, 746, 747, 748, 749, 750, 751, 752, 753,
	754, 755, 756, 757, 758, 759, 760, 761, 762, 763,
	764, 765, 766, 767, 768, 769, 770, 771, 772, 773,
	774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
	784, 785, 786, 787, 788, 789, 0, 0, 84, 0,
	82, 0, 962, 0, 0, 0, 0, 0, 0, 962,
	0, 0, 0, 0, 261, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 271, 962, 962, 274, 963, 964,
	962, 962, 962, 0, 962, 962, 281, 283, 284, 286,
	962, 962, 288, 0, 306, 304, 305, 300, 301, 0,
	313, 295, 296, 299, 330, 331, 30, 960, 601, 0,
	0, 595, 0, 587, 588, 591, 594, 29, 340, 0,
	345, 344, 336, 0, 352, 0, 0, 0, 356, 0,
	358, 359, 0, 427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 451, 452, 453, 454, 455, 456, 457,
	430, 0, 444, 0, 0, 0, 486, 487, 488, 489,
	490, 491, 492, 0, 347, 29, 0, 464, 0, 0,
	0, 0, 0, 0, 0, 0, 343, 0, 560, 0,
	514, 522, 0, 515, 523, 516, 524, 517, 0, 518,
	525, 519, 526, 520, 521, 527, 0, 0, 0, 347,
	0, 0, 48, 0, 414, 0, 362, 364, 365, 366,
	-2, 0, 668, 398, -2, 0, 0, 0, 42, 43,
	0, 0, 0, 0, 51, 937, 53, 54, 0, 0,
	0, 177, 633, 634, 635, 631, 221, 0, 0, 164,
	160, 90, 91, 92, 153, 94, 153, 153, 153, 153,
	174, 174, 174, 174, 132, 133, 134, 135, 136, 0,
	0, 0, 0, 141, 142, 119, 153, 153, 153, 123,
	143, 144, 145, 146, 147, 148, 149, 150, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 111, 155, 155, 155, 157, 157,
	157, 157, 662, 68, 0, 224, 0, 962, 80, 0,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 264,
	639, 0, 962, 267, 268, 416, 670, 671, 272, 273,
	275, 276, 277, 278, 279, 280, 287, 291, 0, 309,
	0, 0, 293, 294, 0, 0, 0, 24, 0, 599,
	0, 0, 0, 0, 0, 590, 592, 593, 598, 32,
	343, 0, 579, 0, 0, 0, 346, 27, 425, 426,
	428, 445, 0, 447, 449, 357, 353, 0, 569, -2,
	435, 436, 460, 461, 462, 0, 0, 0, 0, 458,
	440, 0, 471, 472, 473, 474, 475, 476, 477, 478,
	479, 480, 481, 482, 485, 544, 545, 0, 483, 484,
	493, 0, 0, 348, 349, 463, 0, 619, 29, 0,
	0, 0, 0, 468, 571, 0, 468, 571, 0, 0,
	0, 566, 563, 0, 0, 568, 0, 531, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 413, 0, 0,
	0, 0, 0, 0, 403, 0, 0, 406, 0, 0,
	0, 0, 397, 0, 0, 374, 418, 882, 399, 0,
	401, 402, 422, 0, 422, 45, 422, 47, 0, 417,
	625, 52, 0, 0, 57, 58, 626, 627, 628, 629,
	0, 81, 0, 85, 86, 87, 0, 0, 209, 0,
	0, 203, 203, 0, 201, 202, 83, 168, 165, 0,
	167, 162, 161, 93, 0, 174, 174, 126, 127, 177,
	0, 177, 177, 177, 0, 0, 0, 0, 120, 121,
	122, 112, 0, 113, 114, 115, 0, 116, 117, 118,
	0, 0, 962, 70, 0, 641, 71, 961, 0, 0,
	654, 235, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 0, 72, 237, 239, 238, 242, 0, 0,
	0, 262, 962, 266, 306, 594, 0, 0, 0, 307,
	308, 314, 0, 297, 602, 0, 596, 597, 0, 589,
	25, 0, 636, 637, 580, 581, 360, 446, 448, 450,
	0, 347, 437, 458, 441, 0, 438, 0, 0, 432,
	498, 0, 0, 465, -2, 501, 502, 0, 0, 0,
	0, 0, 537, 0, 0, 538, 0, 586, 0, 564,
	0, 0, 513, 0, 532, 0, 0, 533, 534, 535,
	536, 613, 0, 0, -2, 0, 0, 422, 621, 0,
	363, 392, 394, 0, 389, 404, 405, 407, 0, 409,
	0, 411, 412, 367, 369, 0, 375, 376, 378, 379,
	0, 0, 372, 0, 0, 0, 0, 400, 586, 0,
	422, 40, 41, 0, 55, 56, 0, 0, 62, 178,
	179, 0, 0, 0, 196, 203, 203, 199, 204, 200,
	0, 170, 0, 166, 89, 163, 0, 177, 177, 128,
	0, 129, 130, 131, 0, 151, 0, 0, 0, 0,
	0, 0, 663, 69, 0, 229, 961, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 961,
	0, 961, 655, 656, 657, 658, 0, 75, 0, 0,
	0, 0, 0, 265, 309, 290, 310, 0, 312, 315,
	600, 0, 26, 422, 0, 354, 570, 0, 439, 0,
	459, 442, 499, 350, 0, 153, 153, 549, 153, 157,
	552, 153, 554, 153, 557, 0, 0, 0, 0, 0,
	0, 0, 561, 512, 567, 0, 569, 0, 0, 601,
	0, 613, 603, 615, 617, 0, 29, 0, 609, 0,
	384, 586, 0, 0, 386, 393, 0, 0, 387, 0,
	388, 408, 410, 396, 0, 0, 0, 0, 0, 0,
	0, 594, 423, 39, 59, 60, 61, 222, 226, 227,
	228, 0, 205, 153, 208, 197, 198, 0, 172, 0,
	169, 154, 124, 125, 175, 176, 174, 0, 174, 174,
	174, 0, 158, 0, 962, 225, 230, 231, 232, 233,
	0, 236, 0, 73, 74, 0, 0, 241, 263, 289,
	311, 582, 361, 500, 443, 503, 546, 174, 550, 551,
	553, 555, 556, 558, 505, 504, 0, 0, 0, 0,
	0, 0, 0, 565, 0, 0, 33, 0, 34, 0,
	618, -2, 0, 0, 0, 49, 0, 594, 622, 623,
	390, 0, 395, 370, 377, 0, 0, 0, 0, 0,
	398, 38, 0, 188, 0, 207, 0, 382, 180, 173,
	0, 177, 152, 177, 177, 177, 0, 0, 67, 0,
	76, 77, 0, 0, 0, 584, 0, 547, 548, 0,
	0, 0, 0, 539, 511, 562, 0, 0, 0, 616,
	0, -2, 0, 611, 610, 385, 37, 0, 371, 380,
	381, 0, 0, 0, 418, 0, 187, 189, 0, 194,
	0, 206, 0, 0, 185, 0, 182, 184, 171, 137,
	138, 139, 140, 156, 159, 0, 0, 0, 0, 243,
	28, 0, 0, 506, 508, 507, 509, 0, 0, 0,
	528, 529, 0, 606, 29, 0, 391, 419, 420, 421,
	373, 223, 190, 191, 0, 195, 193, 0, 383, 88,
	0, 181, 183, 0, 257, 0, 78, 79, 72, 585,
	583, 510, 0, 0, 0, 614, -2, 612, 192, 0,
	186, 256, 0, 0, 75, 540, 0, 543, 0, 258,
	0, 240, 541, 0, 0, 0, 210, 0, 0, 211,
	212, 0, 0, 542, 213, 0, 0, 0, 0, 0,
	214, 216, 217, 0, 0, 215, 259, 260, 218, 219,
	220,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 3, 3, 3, 103, 95, 3,
	55, 57, 100, 98, 56, 99, 113, 101, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 364,
	84, 83, 85, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 105, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 94, 3, 106,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 77, 78, 79, 80, 81, 82, 86, 87, 88,
	89, 90, 91, 92, 93, 96, 97, 102, 104, 107,
	108, 109, 110, 111, 112, 114, 115, 116, 117, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1076
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1082
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1084
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1088
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1110
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:1116
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			sel.Formats = yyDollar[5].formats
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:1125
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:1129
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:1135
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 28:
		yyDollar = yyS[yypt-10 : yypt+1]
//line src/parsers/sqlparser/sql.y:1142
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr)}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1148
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1152
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1158
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1162
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:1168
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			ins.Formats = yyDollar[8].formats
			yyVAL.statement = ins
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:1181
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1193
		{
			yyVAL.str = InsertStr
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1197
		{
			yyVAL.str = ReplaceStr
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
//line src/parsers/sqlparser/sql.y:1203
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:1209
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:1213
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:1217
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:1221
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1227
		{
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1229
		{
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1233
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1237
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1243
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1247
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1252
		{
			yyVAL.partitions = nil
		}
	case 49:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1256
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1262
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 51:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1266
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 52:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:1270
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1274
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1280
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1284
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1290
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1294
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1298
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1304
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1308
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1312
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1316
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1322
		{
			yyVAL.str = SessionStr
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1326
		{
			yyVAL.str = GlobalStr
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1332
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1337
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:1343
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1348
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:1352
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:1356
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes), Options: yyDollar[5].databaseOption}
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:1360
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1365
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1369
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1375
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1380
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1385
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1391
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1396
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1402
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1408
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1415
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].tableOption
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1422
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1426
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1432
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1437
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1441
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1445
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:1451
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1463
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1474
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1479
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1485
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1489
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1493
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1497
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1501
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1505
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1509
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1513
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1517
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1521
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1525
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1529
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1533
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1537
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1541
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1545
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1549
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1555
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1561
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1567
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1573
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1579
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1585
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1591
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1599
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1603
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1607
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1611
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1615
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1621
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1625
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1629
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1633
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1637
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1641
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1645
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1649
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1653
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1657
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1661
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1665
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1669
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:1673
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:1677
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:1681
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:1686
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1690
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1694
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1700
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1704
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1708
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1712
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1716
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1720
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1724
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1728
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1734
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1739
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1744
		{
			yyVAL.sqlVal = nil
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1748
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1753
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:1757
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1765
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1769
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:1775
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1783
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1787
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1792
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1796
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1802
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1806
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1810
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1814
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1819
		{
			yyVAL.optVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1823
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1828
		{
			yyVAL.optVal = nil
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1832
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1837
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1841
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1846
		{
			yyVAL.str = ""
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1850
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1854
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1859
		{
			yyVAL.str = ""
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1863
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1867
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1872
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1876
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1880
		{
			yyVAL.colKeyOpt = colKey
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1884
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1888
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1893
		{
			yyVAL.sqlVal = nil
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1897
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:1903
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:1907
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1913
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1917
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1923
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1927
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1932
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1938
		{
			yyVAL.str = ""
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1942
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1948
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1952
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1956
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1960
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1964
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1970
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1974
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:1979
		{
			yyVAL.str = ""
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1983
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:1989
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:1993
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:1999
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2005
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2009
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-10 : yypt+1]
//line src/parsers/sqlparser/sql.y:2015
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 211:
		yyDollar = yyS[yypt-11 : yypt+1]
//line src/parsers/sqlparser/sql.y:2019
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
//line src/parsers/sqlparser/sql.y:2023
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-12 : yypt+1]
//line src/parsers/sqlparser/sql.y:2027
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2033
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2039
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2045
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2049
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2053
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2057
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2061
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2068
		{
			yyVAL.tableOption = &TableOption{}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2072
		{
			yyVAL.tableOption = &TableOption{Engine: yyDollar[3].str}
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:2076
		{
			yyVAL.tableOption = &TableOption{Engine: yyDollar[3].str, Formatter: yyDollar[5].str}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2081
		{
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2083
		{
			yyVAL.databaseOption = &DatabaseOption{Engine: yyDollar[3].str}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2089
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2093
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2097
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 229:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:2103
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2107
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2111
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2115
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2120
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2125
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2129
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 236:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2133
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2145
		{
			yyVAL.statement = &DDL{
				Action: DropVindexStr,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2155
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2159
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-12 : yypt+1]
//line src/parsers/sqlparser/sql.y:2163
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2176
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2186
		{
			yyVAL.statement = &DDL{Action: AddSequenceStr, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-9 : yypt+1]
//line src/parsers/sqlparser/sql.y:2190
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncStr,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 256:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2217
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2223
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2227
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 259:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:2233
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:2237
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2243
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2249
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2253
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2261
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:2269
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2274
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2282
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2286
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2292
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2296
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2302
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2309
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2314
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2318
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2322
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2327
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2331
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2335
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2339
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2343
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2347
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2351
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2355
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2359
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2363
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2367
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2371
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2375
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2379
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:2384
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Limit: yyDollar[6].limit}
			}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2394
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2398
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 293:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2402
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2408
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: string(yyDollar[2].bytes), Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2413
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2417
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2421
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2425
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2439
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2445
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2449
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2455
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2459
		{
			yyVAL.str = "full "
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2465
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2469
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2475
		{
			yyVAL.str = ""
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2479
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2483
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2489
		{
			yyVAL.showFilter = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2493
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2497
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes), Not: true}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2501
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2507
		{
			yyVAL.showFilter = nil
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2511
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2515
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes), Not: true}
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2521
		{
			yyVAL.str = ""
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2525
		{
			yyVAL.str = SessionStr
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2529
		{
			yyVAL.str = GlobalStr
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2535
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2539
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2545
		{
			yyVAL.statement = &Begin{}
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2549
		{
			yyVAL.statement = &Begin{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2555
		{
			yyVAL.statement = &Commit{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2561
		{
			yyVAL.statement = &Rollback{}
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2567
		{
			yyVAL.statement = &OtherRead{}
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2571
		{
			yyVAL.statement = &OtherRead{}
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2575
		{
			yyVAL.statement = &OtherRead{}
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2579
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2583
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2587
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2591
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2597
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2602
		{
			setAllowComments(yylex, true)
		}
	case 334:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2605
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2611
		{
			yyVAL.bytes2 = nil
		}
	case 336:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2615
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2621
		{
			yyVAL.str = UnionStr
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2625
		{
			yyVAL.str = UnionAllStr
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2629
		{
			yyVAL.str = UnionDistinctStr
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2634
		{
			yyVAL.str = ""
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2638
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2642
		{
			yyVAL.str = SQLCacheStr
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2647
		{
			yyVAL.str = ""
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2651
		{
			yyVAL.str = DistinctStr
		}
	case 345:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2656
		{
			yyVAL.str = ""
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2660
		{
			yyVAL.str = StraightJoinHint
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2665
		{
			yyVAL.selectExprs = nil
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2669
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2675
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2679
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2685
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 352:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2689
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2693
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 354:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2697
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2702
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2706
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 357:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2710
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2717
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2722
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2726
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2732
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2736
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2746
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 367:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2750
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2754
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2760
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 370:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:2764
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments}
		}
	case 371:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:2768
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2774
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 373:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:2778
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 374:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2783
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2787
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2793
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 377:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2797
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2803
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Value: yyDollar[1].tableValuedFunctionArgumentValue}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2809
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 380:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2813
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 381:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2817
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2823
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2827
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2833
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 385:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2837
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 386:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2850
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 387:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2854
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 388:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2858
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2862
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2868
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 391:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:2872
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 392:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2878
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2882
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 394:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2888
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2892
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 396:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2897
		{
			yyVAL.empty = struct{}{}
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2901
		{
			yyVAL.empty = struct{}{}
		}
	case 398:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:2906
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2910
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2914
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 402:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2921
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2927
		{
			yyVAL.str = JoinStr
		}
	case 404:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2931
		{
			yyVAL.str = JoinStr
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2935
		{
			yyVAL.str = JoinStr
		}
	case 406:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2941
		{
			yyVAL.str = StraightJoinStr
		}
	case 407:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2947
		{
			yyVAL.str = LeftJoinStr
		}
	case 408:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2951
		{
			yyVAL.str = LeftJoinStr
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2955
		{
			yyVAL.str = RightJoinStr
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2959
		{
			yyVAL.str = RightJoinStr
		}
	case 411:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2965
		{
			yyVAL.str = NaturalJoinStr
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2969
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:2979
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2983
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 415:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:2989
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2993
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:2999
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 418:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3004
		{
			yyVAL.indexHints = nil
		}
	case 419:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3008
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 420:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3012
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 421:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3016
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 422:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3021
		{
			yyVAL.expr = nil
		}
	case 423:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3025
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3031
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3035
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3039
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3043
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3047
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3051
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 430:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3055
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 431:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3061
		{
			yyVAL.str = ""
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3065
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 433:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3071
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3075
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 435:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3081
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 436:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3085
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 437:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3089
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 438:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3093
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 439:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3097
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3101
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 441:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3105
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 442:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3109
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 443:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:3113
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3117
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3123
		{
			yyVAL.str = IsNullStr
		}
	case 446:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3127
		{
			yyVAL.str = IsNotNullStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3131
		{
			yyVAL.str = IsTrueStr
		}
	case 448:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3135
		{
			yyVAL.str = IsNotTrueStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3139
		{
			yyVAL.str = IsFalseStr
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3143
		{
			yyVAL.str = IsNotFalseStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3149
		{
			yyVAL.str = EqualStr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3153
		{
			yyVAL.str = LessThanStr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3157
		{
			yyVAL.str = GreaterThanStr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3161
		{
			yyVAL.str = LessEqualStr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3165
		{
			yyVAL.str = GreaterEqualStr
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3169
		{
			yyVAL.str = NotEqualStr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3173
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 458:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3178
		{
			yyVAL.expr = nil
		}
	case 459:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3182
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3188
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3192
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3196
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3202
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3208
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3212
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 466:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3218
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3222
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3226
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3230
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3234
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3238
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3242
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3246
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3250
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3254
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3258
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3262
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3266
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3270
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3274
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3278
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 482:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3282
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 483:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3286
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3290
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 485:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3294
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3298
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3302
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3306
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 489:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3310
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3318
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 491:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3332
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 492:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3336
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 493:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3340
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3358
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 499:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3362
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:3366
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 501:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3376
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 502:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3380
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 503:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:3384
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 504:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:3388
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 505:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:3392
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 506:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:3396
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 507:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:3400
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 508:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:3404
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 509:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:3408
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 510:
		yyDollar = yyS[yypt-9 : yypt+1]
//line src/parsers/sqlparser/sql.y:3412
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 511:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:3416
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 512:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3420
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 513:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3424
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3434
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3438
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3442
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3447
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3452
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3457
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3463
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3468
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3473
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3477
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3481
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3486
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3491
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3496
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:3500
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 529:
		yyDollar = yyS[yypt-8 : yypt+1]
//line src/parsers/sqlparser/sql.y:3504
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3515
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3525
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3529
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3533
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3537
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3541
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3545
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3551
		{
			yyVAL.str = ""
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3555
		{
			yyVAL.str = BooleanModeStr
		}
	case 541:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3559
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 542:
		yyDollar = yyS[yypt-7 : yypt+1]
//line src/parsers/sqlparser/sql.y:3563
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3567
		{
			yyVAL.str = QueryExpansionStr
		}
	case 544:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3573
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3577
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3583
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 547:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3587
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3591
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3595
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3599
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3603
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3609
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3613
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3617
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3621
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3625
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3629
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3633
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3638
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3642
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 561:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3647
		{
			yyVAL.str = string("")
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3651
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3657
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3661
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 565:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3667
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 566:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3672
		{
			yyVAL.expr = nil
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3676
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3682
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3686
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 570:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3690
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3696
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3700
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3704
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3708
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3712
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3716
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3720
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3724
		{
			yyVAL.expr = &NullVal{}
		}
	case 579:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3730
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3739
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 581:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3743
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 582:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3748
		{
			yyVAL.exprs = nil
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3752
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3757
		{
			yyVAL.expr = nil
		}
	case 585:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3761
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3766
		{
			yyVAL.orderBy = nil
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3770
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3776
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3780
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3786
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3791
		{
			yyVAL.str = AscScr
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3795
		{
			yyVAL.str = AscScr
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3799
		{
			yyVAL.str = DescScr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3804
		{
			yyVAL.limit = nil
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3808
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 596:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3812
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3816
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 598:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3821
		{
			yyVAL.str = ""
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3825
		{
			yyVAL.str = ForUpdateStr
		}
	case 600:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3829
		{
			yyVAL.str = ShareModeStr
		}
	case 601:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3834
		{
			yyVAL.formats = nil
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3838
		{
			yyVAL.formats = &Formats{FormatName: string(yyDollar[2].bytes)}
		}
	case 603:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3851
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3855
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3859
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3864
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 607:
		yyDollar = yyS[yypt-4 : yypt+1]
//line src/parsers/sqlparser/sql.y:3868
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 608:
		yyDollar = yyS[yypt-6 : yypt+1]
//line src/parsers/sqlparser/sql.y:3872
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3879
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3883
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 611:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3887
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3891
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:3896
		{
			yyVAL.updateExprs = nil
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line src/parsers/sqlparser/sql.y:3900
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3906
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3910
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3916
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3920
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3926
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3932
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3942
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3946
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3952
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3958
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3962
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3968
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3972
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3976
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 629:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:3980
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 631:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:3987
		{
			yyVAL.bytes = []byte("charset")
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3994
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:3998
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4002
		{
			yyVAL.expr = &Default{}
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:4011
		{
			yyVAL.byt = 0
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:4015
		{
			yyVAL.byt = 1
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:4020
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-3 : yypt+1]
//line src/parsers/sqlparser/sql.y:4024
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:4029
		{
			yyVAL.str = ""
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4033
		{
			yyVAL.str = IgnoreStr
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4039
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4043
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4047
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4051
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4055
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4059
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4063
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4067
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4071
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4075
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:4080
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4084
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4088
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4094
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4098
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:4103
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4107
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4111
		{
			yyVAL.empty = struct{}{}
		}
	case 662:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:4116
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
//line src/parsers/sqlparser/sql.y:4120
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4126
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4130
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4137
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4143
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4147
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4154
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4468
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 960:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4477
		{
			decNesting(yylex)
		}
	case 961:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:4482
		{
			skipToEnd(yylex)
		}
	case 962:
		yyDollar = yyS[yypt-0 : yypt+1]
//line src/parsers/sqlparser/sql.y:4487
		{
			skipToEnd(yylex)
		}
	case 963:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4491
		{
			skipToEnd(yylex)
		}
	case 964:
		yyDollar = yyS[yypt-1 : yypt+1]
//line src/parsers/sqlparser/sql.y:4495
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
